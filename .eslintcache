[{"C:\\Git\\MeuAlunoReact\\src\\index.js":"1","C:\\Git\\MeuAlunoReact\\src\\views\\App.jsx":"2","C:\\Git\\MeuAlunoReact\\src\\views\\Usuario\\CriarSenha.jsx":"3","C:\\Git\\MeuAlunoReact\\src\\views\\Usuario\\Login.jsx":"4","C:\\Git\\MeuAlunoReact\\src\\views\\Usuario\\RecuperarSenha.jsx":"5","C:\\Git\\MeuAlunoReact\\src\\contexts\\Provider.jsx":"6","C:\\Git\\MeuAlunoReact\\src\\components\\content\\Content.jsx":"7","C:\\Git\\MeuAlunoReact\\src\\components\\Routes\\Private\\Private.jsx":"8","C:\\Git\\MeuAlunoReact\\src\\variaveis.js":"9","C:\\Git\\MeuAlunoReact\\src\\contexts\\StoreContext.js":"10","C:\\Git\\MeuAlunoReact\\src\\utils\\useStorage.js":"11","C:\\Git\\MeuAlunoReact\\src\\utils\\loader.jsx":"12","C:\\Git\\MeuAlunoReact\\src\\components\\content\\Header.jsx":"13","C:\\Git\\MeuAlunoReact\\src\\views\\Usuario\\Usuarios.jsx":"14","C:\\Git\\MeuAlunoReact\\src\\views\\Usuario\\CadastroUsuario.jsx":"15","C:\\Git\\MeuAlunoReact\\src\\views\\Aluno\\CadastroAluno.jsx":"16","C:\\Git\\MeuAlunoReact\\src\\views\\Aluno\\Alunos.jsx":"17","C:\\Git\\MeuAlunoReact\\src\\views\\Servico\\Servicos.jsx":"18","C:\\Git\\MeuAlunoReact\\src\\views\\Servico\\CadastroServico.jsx":"19","C:\\Git\\MeuAlunoReact\\src\\components\\menu\\Menu.jsx":"20","C:\\Git\\MeuAlunoReact\\src\\views\\Materia\\CadastroMateria.jsx":"21","C:\\Git\\MeuAlunoReact\\src\\views\\Materia\\Materias.jsx":"22","C:\\Git\\MeuAlunoReact\\src\\views\\Aula\\CadastroAula.jsx":"23","C:\\Git\\MeuAlunoReact\\src\\views\\Empresa\\Empresa.jsx":"24","C:\\Git\\MeuAlunoReact\\src\\views\\Aula\\Aulas.jsx":"25","C:\\Git\\MeuAlunoReact\\src\\views\\Financeiro\\CadastroFinanceiro.jsx":"26","C:\\Git\\MeuAlunoReact\\src\\views\\Financeiro\\Financeiros.jsx":"27","C:\\Git\\MeuAlunoReact\\src\\views\\Empresa\\CadastroEmpresa.jsx":"28","C:\\Git\\MeuAlunoReact\\src\\views\\Home\\Home.jsx":"29","C:\\Git\\MeuAlunoReact\\src\\views\\Contratos\\CadastroContrato.jsx":"30","C:\\Git\\MeuAlunoReact\\src\\views\\Contratos\\Contratos.jsx":"31","C:\\Git\\MeuAlunoReact\\src\\utils\\storage.js":"32","C:\\Git\\MeuAlunoReact\\src\\views\\Styles\\useStyles.js":"33","C:\\Git\\MeuAlunoReact\\src\\hooks\\useFetch.js":"34","C:\\Git\\MeuAlunoReact\\src\\utils\\mask.jsx":"35","C:\\Git\\MeuAlunoReact\\src\\components\\menu\\MenuItem.jsx":"36","C:\\Git\\MeuAlunoReact\\src\\components\\user\\UserThumb.jsx":"37"},{"size":422,"mtime":1670879681560,"results":"38","hashOfConfig":"39"},{"size":950,"mtime":1670879681564,"results":"40","hashOfConfig":"39"},{"size":5112,"mtime":1670879681574,"results":"41","hashOfConfig":"39"},{"size":6540,"mtime":1672493133928,"results":"42","hashOfConfig":"39"},{"size":3960,"mtime":1670879681576,"results":"43","hashOfConfig":"39"},{"size":507,"mtime":1670879599965,"results":"44","hashOfConfig":"39"},{"size":2862,"mtime":1672380902242,"results":"45","hashOfConfig":"39"},{"size":1014,"mtime":1670879681558,"results":"46","hashOfConfig":"39"},{"size":117,"mtime":1670882398269,"results":"47","hashOfConfig":"39"},{"size":154,"mtime":1670879599966,"results":"48","hashOfConfig":"39"},{"size":446,"mtime":1670879599967,"results":"49","hashOfConfig":"39"},{"size":467,"mtime":1670879681561,"results":"50","hashOfConfig":"39"},{"size":2189,"mtime":1672382391384,"results":"51","hashOfConfig":"39"},{"size":2465,"mtime":1670879681576,"results":"52","hashOfConfig":"39"},{"size":10781,"mtime":1670879681572,"results":"53","hashOfConfig":"39"},{"size":23376,"mtime":1670879681563,"results":"54","hashOfConfig":"39"},{"size":2355,"mtime":1670879681563,"results":"55","hashOfConfig":"39"},{"size":2090,"mtime":1670879681572,"results":"56","hashOfConfig":"39"},{"size":13480,"mtime":1670879681571,"results":"57","hashOfConfig":"39"},{"size":1414,"mtime":1672377227309,"results":"58","hashOfConfig":"39"},{"size":5419,"mtime":1670879681570,"results":"59","hashOfConfig":"39"},{"size":1897,"mtime":1670879681571,"results":"60","hashOfConfig":"39"},{"size":7678,"mtime":1670879681565,"results":"61","hashOfConfig":"39"},{"size":2264,"mtime":1672381260994,"results":"62","hashOfConfig":"39"},{"size":1781,"mtime":1670879681565,"results":"63","hashOfConfig":"39"},{"size":15343,"mtime":1670879681568,"results":"64","hashOfConfig":"39"},{"size":13702,"mtime":1670879681569,"results":"65","hashOfConfig":"39"},{"size":22418,"mtime":1670879681567,"results":"66","hashOfConfig":"39"},{"size":153,"mtime":1670879681570,"results":"67","hashOfConfig":"39"},{"size":8758,"mtime":1670879681566,"results":"68","hashOfConfig":"39"},{"size":926,"mtime":1670879681566,"results":"69","hashOfConfig":"39"},{"size":740,"mtime":1670879599967,"results":"70","hashOfConfig":"39"},{"size":1163,"mtime":1670879599976,"results":"71","hashOfConfig":"39"},{"size":931,"mtime":1670879599966,"results":"72","hashOfConfig":"39"},{"size":4143,"mtime":1670879681561,"results":"73","hashOfConfig":"39"},{"size":1771,"mtime":1672112520423,"results":"74","hashOfConfig":"39"},{"size":606,"mtime":1672378485965,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1av5pli",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"78"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"78"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"78"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"78"},"C:\\Git\\MeuAlunoReact\\src\\index.js",[],["175","176"],"C:\\Git\\MeuAlunoReact\\src\\views\\App.jsx",[],"C:\\Git\\MeuAlunoReact\\src\\views\\Usuario\\CriarSenha.jsx",["177","178","179","180"],"import React, {useState} from \"react\";\r\nimport Loader from \"../../utils/loader\";\r\nimport { url } from \"../../../src/variaveis\";\r\nimport { TextField, Button, DialogTitle, DialogContent, DialogContentText, Dialog } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport \"./CriarSenha.css\";\r\n\r\nconst CriarSenha = () => {\r\n\r\n    const initialValues = {\r\n        senha: \"\",\r\n        senhaConfere: \"\"        \r\n    }\r\n    const [values,setValues] = useState(initialValues);\r\n    const [open, setOpen] = useState(false);\r\n    const alertas = {\r\n        text: \"\",\r\n        title: \"\"\r\n      }\r\n    const [mensagem, setMensagem] = useState(alertas);\r\n    const history = useHistory();\r\n\r\n    function handleClose() {\r\n        setOpen(false);\r\n      };\r\n   \r\n    function handleChange(e) {\r\n        const { value, name } = e.target;\r\n        setValues({\r\n          ...values,\r\n          [name]: value,\r\n        });\r\n      };        \r\n    \r\n    function onSubmit(event) {\r\n        debugger;\r\n        event.preventDefault();\r\n        if (values.senha != values.senhaConfere) {\r\n            setMensagem({ ...values, title: \"Alerta!\", text: \"As senhas informadas devem ser iguais\" });\r\n            setOpen(true);            \r\n        } else {\r\n            document.getElementById(\"div-loading\").style.display = \"block\";\r\n            var userData = window.location.search;\r\n            var urlParams = new URLSearchParams(userData);\r\n            const body = {\r\n                UsuarioEmail: urlParams.get('email'),\r\n                ResetToken : urlParams.get('token'),       \r\n                NewPassword: values.senha,   \r\n            }\r\n            body.ResetToken = body.ResetToken.replace(' ','+');\r\n            \r\n            const response = fetch(`${url}/api/v1/login/resetPassword`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body),\r\n            })\r\n            .then( async (response) => {\r\n                if(response.ok){\r\n                  let data = await response.json();\r\n                  setMensagem({ ...values, title: \"Sucesso!\", text: data })\r\n                  setOpen(true);\r\n                }else{\r\n                  let data = await response.json();\r\n                  setMensagem({ ...values, title: \"Erro!\", text: data })\r\n                  setOpen(true);\r\n                }\r\n              })\r\n              .catch((err) => {\r\n                  console.log(err);\r\n              })\r\n              document.getElementById(\"div-loading\").style.display = \"none\";  \r\n        }\r\n     };\r\n\r\n    return (\r\n        \r\n            <>\r\n            <img className=\"logotipo\" src=\"https://i.imgur.com/LbUVpGb.png\" />\r\n            <div className=\"wrapper\">\r\n            <div className=\"user-login\">\r\n                <h1 className=\"user-login__title\">Criar nova senha</h1>\r\n                <form>   \r\n                <div className=\"user-login__form-control\">                 \r\n                    <TextField\r\n                        id=\"password\"\r\n                        name=\"senha\"\r\n                        label=\"Senha\"\r\n                        type=\"password\"\r\n                        required={true}\r\n                        onChange={handleChange}\r\n                        value={values.senha}\r\n                        variant=\"outlined\"\r\n                        className=\"user-login__form-control\" />\r\n                </div>\r\n                <div className=\"user-login__form-control\">\r\n                    <TextField\r\n                        id=\"password\"\r\n                        name=\"senhaConfere\"\r\n                        label=\"Confirme a Senha\"\r\n                        type=\"password\"\r\n                        required={true}\r\n                        onChange={handleChange}\r\n                        value={values.senhaConfere}\r\n                        variant=\"outlined\"\r\n                        className=\"user-login__form-control\" />\r\n                </div>                   \r\n                <button className=\"user-login__submit-button\" onClick={onSubmit}>Confirmar</button>\r\n                </form>\r\n            </div>\r\n            <Loader />\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{mensagem.title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {mensagem.text}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                {(mensagem.title == \"Sucesso!\") ?     \r\n            <Button onClick={() => { handleClose(); history.push(\"/login\"); }}>Ok</Button>\r\n             : <Button onClick={handleClose}>Ok</Button>} \r\n\r\n            </Dialog>\r\n        </div>\r\n        </> \r\n\r\n             \r\n    )\r\n}\r\n\r\nexport default CriarSenha;","C:\\Git\\MeuAlunoReact\\src\\views\\Usuario\\Login.jsx",["181","182","183","184","185","186"],"C:\\Git\\MeuAlunoReact\\src\\views\\Usuario\\RecuperarSenha.jsx",["187","188","189"],"import React, {useState} from \"react\";\r\nimport Loader from \"../../utils/loader\";\r\nimport { url } from \"../../../src/variaveis\";\r\nimport { Button, DialogTitle, DialogContent, DialogContentText, Dialog } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n\r\nconst RecuperarSenha = () => {\r\n\r\n    const initialValues = {\r\n        email: \"\"\r\n    }\r\n    const [values,setValues] = useState(initialValues);\r\n    const [open, setOpen] = useState(false);\r\n    const alertas = {\r\n        text: \"\",\r\n        title: \"\"\r\n      }\r\n    const [mensagem, setMensagem] = useState(alertas);\r\n    const history = useHistory();\r\n\r\n    function handleClose() {\r\n        setOpen(false);\r\n      };\r\n   \r\n    function handleChange(e) {\r\n        const { value, name } = e.target;\r\n        setValues({\r\n          ...values,\r\n          [name]: value,\r\n        });\r\n      };        \r\n    \r\n    function onSubmit(event) {\r\n        event.preventDefault();\r\n        if (values.email == \"\") {\r\n            setMensagem({ ...values, title: \"Alerta!\", text: \"Informe seu e-mail\" });\r\n            setOpen(true);            \r\n        } else {\r\n            document.getElementById(\"div-loading\").style.display = \"block\";\r\n            const body = {\r\n                UsuarioEmail: values.email,\r\n                \r\n            }\r\n            const response = fetch(`${url}/api/v1/login/forgotpassword`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body),\r\n            })\r\n            .then( async (response) => {\r\n                if(response.ok){\r\n                  let data = await response.json();\r\n                  setMensagem({ ...values, title: \"Sucesso!\", text: data })\r\n                  setOpen(true);\r\n                }else{\r\n                  let data = await response.json();\r\n                  setMensagem({ ...values, title: \"Erro!\", text: data })\r\n                  setOpen(true);\r\n                }\r\n              })\r\n              .catch((err) => {\r\n                  console.log(err);\r\n              })\r\n              document.getElementById(\"div-loading\").style.display = \"none\";  \r\n        }\r\n     };\r\n\r\n    return (\r\n        \r\n            <>\r\n            <div className=\"wrapper\">\r\n            <div className=\"user-login\">\r\n                <h1 className=\"user-login__title\">Recuperar Senha</h1>\r\n                <form>\r\n                    <div className=\"user-login__form-control\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input\r\n                            id=\"email\"\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            onChange={handleChange}\r\n                            value={values.email}\r\n                            required />\r\n                    </div>                    \r\n                    <button onClick={onSubmit}>Confirmar</button>\r\n                </form>\r\n            </div>\r\n            <Loader />\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{mensagem.title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {mensagem.text}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                {(mensagem.title == \"Sucesso!\") ?     \r\n            <Button onClick={() => { handleClose(); history.push(\"/login\"); }}>Ok</Button>\r\n             : <Button onClick={handleClose}>Ok</Button>} \r\n\r\n            </Dialog>\r\n        </div>\r\n        </> \r\n\r\n             \r\n    )\r\n}\r\n\r\nexport default RecuperarSenha;","C:\\Git\\MeuAlunoReact\\src\\contexts\\Provider.jsx",[],"C:\\Git\\MeuAlunoReact\\src\\components\\content\\Content.jsx",[],"C:\\Git\\MeuAlunoReact\\src\\components\\Routes\\Private\\Private.jsx",[],"C:\\Git\\MeuAlunoReact\\src\\variaveis.js",[],"C:\\Git\\MeuAlunoReact\\src\\contexts\\StoreContext.js",[],"C:\\Git\\MeuAlunoReact\\src\\utils\\useStorage.js",[],"C:\\Git\\MeuAlunoReact\\src\\utils\\loader.jsx",["190"],"import * as React from 'react';\r\nimport { Box, CircularProgress } from \"@material-ui/core\";\r\n\r\nexport default function Loader() {\r\n  return (\r\n    //   <div className=\"Geral\" style={{display: \"block\"}}>\r\n    // <Box>\r\n    //   <CircularProgress />\r\n    // </Box>\r\n    // </div>\r\n    <div id=\"div-loading\">\r\n    <div id=\"loading-icon\">\r\n    <CircularProgress\r\n    sx={{ color: '#fff' }} />\r\n    <h4 id=\"loading-text\">Aguarde...</h4>\r\n    </div>\r\n  \r\n  </div> \r\n  );\r\n}","C:\\Git\\MeuAlunoReact\\src\\components\\content\\Header.jsx",["191","192","193","194","195","196","197","198","199","200","201","202","203"],"import {\r\n  MenuItem,\r\n  Paper,\r\n  TextField,\r\n  AppBar,\r\n  Box,\r\n  Toolbar,\r\n  Typography,\r\n  Select,\r\n  FormControl,\r\n  InputLabel\r\n} from \"@material-ui/core\";\r\nimport React, { useContext } from \"react\";\r\nimport StoreContext from '../../contexts/StoreContext';\r\nimport useStyles from \"../../views/Styles/useStyles\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Header = () => {\r\n  const { token, setToken } = useContext(StoreContext);\r\n  const { userLogged, setUserLogged } = useContext(StoreContext);\r\n\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  // useEffect(() => {\r\n  // },[userLogged])\r\n\r\n  if (token != null) {\r\n\r\n    const showEmpresas = () => {\r\n      return userLogged.empresa.map((emp) => (\r\n        <MenuItem value={emp.id}>{emp.razaoSocial}</MenuItem>\r\n      ));\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n      const { name, value } = e.target;\r\n      var newEmpresa = userLogged.empresa.filter((emp) => (\r\n        emp.id == value\r\n      ))     \r\n      setUserLogged({ ...userLogged, empresaId: newEmpresa[0].id, empresaNome: newEmpresa[0].razaoSocial })\r\n      history.push('/');      \r\n    }\r\n\r\n    return (\r\n      <div className=\"rf-header__content\">\r\n        <div className=\"rf-wid-auto --frow-center --fgap-10\">\r\n          <button className=\"rf-button-icon-color-client rf-icon-home\" type=\"button\" onClick={() => setToken(null)}></button>\r\n          <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n            <Select\r\n              //className=\"header-select\"\r\n              labelId=\"empresaNome\"\r\n              id=\"empresaNome\"\r\n              name=\"empresaNome\"\r\n              onChange={handleChange}\r\n              label=\"Empresa\"\r\n              value={userLogged.empresaId}            \r\n            >\r\n              {userLogged.empresa.length > 0\r\n                ? showEmpresas()\r\n                : false}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <a className=\"rf-button-icon-color-client rf-icon-enter\" type=\"button\" onClick={() => setToken(null)}></a>   \r\n      </div>\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <></>\r\n    )\r\n  }\r\n};\r\n\r\nexport default Header;\r\n","C:\\Git\\MeuAlunoReact\\src\\views\\Usuario\\Usuarios.jsx",["204","205","206","207","208","209","210","211","212"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Button, Grid, MenuItem, Paper, TextField } from \"@material-ui/core\";\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport \"./Usuarios.css\";\r\nimport { url } from \"../../../src/variaveis\";\r\n\r\n\r\nconst Usuarios = () => {\r\n  const { token, userLogged } = useContext(StoreContext);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const response = useFetch(`${ url }/api/v1/usuarios/empresa/${userLogged.empresaId}`,\"get\",token);\r\n  \r\n  const initialValues = {\r\n    TipoUsuario: \"\",\r\n    EmpresaId: \"\",\r\n    PessoaId: \"\",\r\n    Login: \"\",\r\n    Senha: \"\",\r\n    showPassword: false,\r\n  };\r\n\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  function editarUsuario(id) {\r\n    history.push(`/cadastroUsuario/${id}`)\r\n  }\r\n\r\n  function novoUsuario() {\r\n    history.push(\"/cadastroUsuario\")\r\n  }\r\n\r\n  function showUsuarios(usuarios) {\r\n    return (\r\n      usuarios.map((usuario) => (\r\n        <tr onClick={() => editarUsuario(usuario.id)}>\r\n          <td key={usuario.id}>{usuario.id}</td>\r\n          <td key={usuario.empresaNome}>{usuario.empresaNome}</td>\r\n          <td key={usuario.pessoaNome}>{usuario.pessoaNome}</td>\r\n          <td key={usuario.login}>{usuario.login}</td>\r\n          <td key={usuario.tipoUsuario}>{usuario.tipoUsuario === 1 ? \"Administrador\" : \"Cliente\"}</td>\r\n          <td key={usuario.ativo}>{usuario.ativo === true ? \"Ativo\" : \"Inativo\"}</td>\r\n        </tr>\r\n      ))\r\n    )\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"lista-usuarios\">\r\n      <h1>Usuários</h1>\r\n\r\n      <div className=\"btn-novo\">\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          onClick={novoUsuario}\r\n          className=\"btn-novo\"\r\n        >\r\n          Novo\r\n        </Button>\r\n      </div>\r\n\r\n\r\n      <table id=\"financeiros\">\r\n        <tbody>\r\n          <tr>\r\n            <th>Id</th>\r\n            <th>Empresa</th>\r\n            <th>Pessoa</th>\r\n            <th>Login</th>\r\n            <th>Tipo</th>\r\n            <th>Status</th>\r\n          </tr>\r\n          {response.data ?\r\n            showUsuarios(response.data)\r\n            : false}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Usuarios;\r\n","C:\\Git\\MeuAlunoReact\\src\\views\\Usuario\\CadastroUsuario.jsx",["213","214","215","216","217","218","219","220","221"],"import { \r\n    Grid, MenuItem, Paper, TextField, Button,  DialogTitle,\r\n    DialogContent,\r\n    DialogContentText,  \r\n    Dialog,\r\n} from \"@material-ui/core\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport { url } from \"../../../src/variaveis\";\r\nimport Loader from \"../../utils/loader\";\r\n\r\nfunction CadastroUsuario() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const history = useHistory();\r\n    const { token, userLogged } = useContext(StoreContext);\r\n\r\n    var editando = false;\r\n    var editarUsuarioUrl = \"\";\r\n    const editarUsuarioId = window.location.pathname.split(\"/\");\r\n    if (editarUsuarioId[2] != null) {\r\n        editarUsuarioUrl = `${ url }/api/v1/usuarios/${editarUsuarioId[2]}`;\r\n        editando = true;\r\n    }\r\n\r\n    const listaPessoas = useFetch(`${ url }/api/v1/pessoas/empresa/${userLogged.empresaId}`,\"get\",token); \r\n\r\n    const initialValues = {\r\n        Id: 0,\r\n        TipoUsuario: \"\",\r\n        EmpresaId: \"\",\r\n        PessoaId: \"\",\r\n        Login: \"\",\r\n        EmpresaNome: \"\",\r\n        PessoaNome: \"\",\r\n        Ativo: true          \r\n    };\r\n\r\n    const[values,setValues] = useState(initialValues);    \r\n\r\n  const responseEditarUsuario = useFetch(editarUsuarioUrl,\"get\",token);\r\n    \r\n  useEffect(\r\n    function() {\r\n      if(responseEditarUsuario.data != null){\r\n        setValues((prevState) => ({\r\n          Id: responseEditarUsuario.data.id,\r\n          TipoUsuario: responseEditarUsuario.data.tipoUsuario,\r\n          EmpresaId: responseEditarUsuario.data.empresaId,\r\n          PessoaId: responseEditarUsuario.data.pessoaId,\r\n          Login: responseEditarUsuario.data.login,          \r\n          EmpresaNome: responseEditarUsuario.data.empresaNome,\r\n          PessoaNome: responseEditarUsuario.data.pessoaNome,\r\n          Ativo: responseEditarUsuario.data.ativo, \r\n        }))\r\n      }\r\n    },[responseEditarUsuario]\r\n  );\r\n\r\n    const showPessoas = () => {\r\n        return  listaPessoas.data ? \r\n         (\r\n          listaPessoas.data.map((pessoa) => (\r\n                 <MenuItem value={pessoa.id}>\r\n                     {pessoa.nome}\r\n                </MenuItem>\r\n             ))\r\n         ) : false\r\n     };\r\n\r\n    const handleChange = (e) => {\r\n        const {name, value} = e.target;\r\n        setValues({...values, [name]: e.target.value});\r\n    };\r\n\r\n    const alertas = {\r\n        text: \"\",\r\n        title: \"\"\r\n      }\r\n    const [mensagem, setMensagem] = useState(alertas);\r\n\r\n  const handleClickOpen = () => {      \r\n    if (validadorForm()) {\r\n      handleSubmit();      \r\n    } else {\r\n      console.log(\"form inválido\");\r\n    }\r\n  };\r\n  \r\n  const validadorForm = () => {\r\n    if(values.TipoUsuario == \"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar tipo de usuário\" });\r\n      setOpen(true);      \r\n    } else if (values.EmpresaId == \"\"){\r\n        setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário selecionar empresa do usuário\" });\r\n      setOpen(true);\r\n    } else if (values.PessoaId == \"\"){\r\n        setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário selecionar pessoa do usuário\" });\r\n      setOpen(true);\r\n    } else if (values.Login == \"\"){\r\n        setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar login do usuário\" });\r\n      setOpen(true);\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  function handleSubmit(e) {     \r\n    document.getElementById(\"div-loading\").style.display = \"block\";\r\n\r\n    debugger;\r\n    const response = fetch(`${ url }/api/v1/usuarios/cadastrar`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: 'Bearer '+token,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(values),\r\n    })\r\n\r\n    .then(async (response) => {\r\n\r\n      if (response.ok) {\r\n        let data = await response.json();\r\n        setMensagem({ ...values, title: \"Sucesso!\", text: editando ? \"Usuário atualizado.\" : \"Usuário cadastrado.\" })\r\n        setOpen(true);\r\n      } else {\r\n        let data = await response.json();\r\n        setMensagem({ ...values, title: \"Erro!\", text: data })\r\n        setOpen(true);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })   \r\n    document.getElementById(\"div-loading\").style.display = \"none\";\r\n  }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <main className={classes.layout}>\r\n                <Paper className={classes.paper}>\r\n                    <div className={classes.titulo}>\r\n                        <h1>Cadastro de Usuários</h1>\r\n                    </div>\r\n                    <form>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} sm={2}>\r\n                                <TextField\r\n                                    id=\"TipoUsuario\"\r\n                                    name=\"TipoUsuario\"\r\n                                    label=\"Tipo\"\r\n                                    select\r\n                                    onChange={handleChange}\r\n                                    fullWidth\r\n                                    value={values.TipoUsuario}\r\n                                >\r\n                                    <MenuItem value=\"1\">Admin</MenuItem>\r\n                                    <MenuItem value=\"2\">Cliente</MenuItem>\r\n                                </TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    id=\"EmpresaId\"\r\n                                    name=\"EmpresaId\"\r\n                                    label=\"Empresa\"\r\n                                    fullWidth\r\n                                    value={values.EmpresaId}\r\n                                    onChange={handleChange}                                    \r\n                                    select                                   \r\n                                >\r\n                                     <MenuItem selected value={userLogged.empresaId}>{userLogged.empresaNome}</MenuItem>\r\n                                    </TextField>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    id=\"PessoaId\"\r\n                                    name=\"PessoaId\"\r\n                                    label=\"Pessoa\"\r\n                                    fullWidth\r\n                                    value={values.PessoaId}\r\n                                    onChange={handleChange}\r\n                                    select                                    \r\n                                >\r\n                                {showPessoas()}\r\n                            \t</TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} sm={4}>\r\n                                <TextField\r\n                                    id=\"Login\"\r\n                                    name=\"Login\"\r\n                                    label=\"Login\"                                    \r\n                                    fullWidth\r\n                                    value={values.Login}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </Grid>\r\n                            {editando ?\r\n                            (\r\n                                <Grid item xs={12} sm={4}>\r\n                                <TextField\r\n                                    id=\"Ativo\"\r\n                                    name=\"Ativo\"\r\n                                    label=\"Situação\"                                  \r\n                                    value={values.Ativo}\r\n                                    onChange={handleChange}\r\n                                    select                                   \r\n                                >\r\n                                  <MenuItem value={true}>Ativo</MenuItem>\r\n                                  <MenuItem value={false}>Inativo</MenuItem>\r\n                                </TextField>                               \r\n                            </Grid>\r\n                            )\r\n                          : \"\"}\r\n                           \r\n                        </Grid>\r\n\r\n                        <div className={classes.buttons}>\r\n                            {editando\r\n                                ? false\r\n                                : <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"inherit\"\r\n                                    className={classes.button}\r\n                                >\r\n                                    Limpar\r\n                                </Button>}\r\n\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {handleClickOpen(); history.push(\"/usuarios\");}}\r\n                                className={classes.button}\r\n                            >\r\n                                {editando ? \"Atualizar\" : \"Cadastrar\"}\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </Paper>\r\n                <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{mensagem.title}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {mensagem.text}\r\n            </DialogContentText>\r\n          </DialogContent>          \r\n\r\n          {(mensagem.text == \"Usuário cadastrado com sucesso\" || mensagem.text == \"Usuário atualizado com sucesso\") ?     \r\n            <Button onClick={() => { handleClose(); history.push(\"/usuarios\"); }}>Ok</Button>\r\n             : <Button onClick={handleClose}>Ok</Button>} \r\n          \r\n        </Dialog>\r\n            </main>\r\n            <Loader />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default CadastroUsuario;","C:\\Git\\MeuAlunoReact\\src\\views\\Aluno\\CadastroAluno.jsx",["222","223","224","225","226","227","228","229","230"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { cepMask, cpfMask, onlyLetters, onlyNumbersMax5, phoneMask, dateFormat, dayNumber } from \"../../utils/mask\";\r\nimport { url } from \"../../../src/variaveis\";\r\nimport Loader from \"../../utils/loader\";\r\n\r\nimport {\r\n  Button,\r\n  Divider,\r\n  Grid,  \r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  TextField,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  Dialog,\r\n  CircularProgress\r\n\r\n} from \"@material-ui/core\";\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport { format } from 'date-fns';\r\nimport { useHistory } from \"react-router\";\r\n\r\n\r\nfunction CadastroAluno() {\r\n  const { token, userLogged } = useContext(StoreContext);\r\n\r\n  const materiasUrl = `${ url }/api/v1/materias/empresa/${userLogged.empresaId}`;\r\n  const materiasResponse = useFetch(materiasUrl,\"get\",token);\r\n  const servicosUrl = `${ url }/api/v1/servicos/empresa/${userLogged.empresaId}`;\r\n  const servicosResponse = useFetch(servicosUrl,\"get\",token);\r\n  \r\n  const gerarContrato = () => {\r\n    fetch(`${ url }/api/v1/empresas/gerarContratoPDF/${userLogged.empresaId},${values.Id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: 'Bearer '+token,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }\r\n    })\r\n  };  \r\n\r\n  const editarAlunoId = window.location.pathname.split(\"/\");\r\n  var editarAlunoUrl = \"\";\r\n\r\n  if (editarAlunoId[2] != null) {\r\n    editarAlunoUrl = `${ url }/api/v1/alunos/${editarAlunoId[2]}`;\r\n  }\r\n\r\n  const history = useHistory();\r\n\r\n  const alunoResponse = useFetch(editarAlunoUrl,\"get\",token);\r\n  const [open, setOpen] = useState(false);\r\n  \r\n  const initialValues = {\r\n    Id: 0,\r\n    Nome: \"\",\r\n    DataNascimento: \"\",\r\n    Serie: \"\",\r\n    NomeResponsavel: \"\",\r\n    CPFResponsavel: \"\",\r\n    TelefoneResponsavel: \"\",\r\n    EmailResponsavel: \"\",\r\n    Escola: \"\",\r\n    Endereco: {\r\n      Logradouro: \"\",\r\n      Numero: \"\",\r\n      Complemento: \"\",\r\n      Bairro: \"\",\r\n      Cidade: \"\",\r\n      Estado: \"\",\r\n      CEP: \"\",\r\n    },\r\n    EmpresaId: userLogged.empresaId,\r\n    ServicoId: \"\",\r\n    MateriaAlunos: [],\r\n    DiaVencimento: 1\r\n  };\r\n\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const alertas = {\r\n    text: \"\",\r\n    title: \"\"\r\n  }\r\n\r\n  const [mensagem, setMensagem] = useState(alertas);\r\n\r\n  const handleClickOpen = () => {      \r\n    if (validadorForm()) {\r\n      handleSubmit();      \r\n    } else {\r\n      console.log(\"form inválido\");\r\n    }\r\n  };\r\n\r\n  const validadorForm = () => {\r\n    if(values.Nome ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar nome do aluno\" });\r\n      setOpen(true);      \r\n    } else if(values.DataNascimento ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar data de nascimento do aluno\" });\r\n      setOpen(true); \r\n    } else if(values.Serie ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar a série do aluno\" });\r\n      setOpen(true); \r\n    } else if(values.Escola ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o nome da escola do aluno\" });\r\n      setOpen(true); \r\n    } else if(values.NomeResponsavel ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o nome do responsável pelo aluno\" });\r\n      setOpen(true); \r\n    \r\n    // else if(values.CPFResponsavel ===\"\"){\r\n    //   setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o CPF do responsável pelo aluno\" });\r\n    //   setOpen(true); \r\n    // \r\n\r\n    // } else if(values.TelefoneResponsavel ===\"\"){\r\n    //   setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o telefone do responsável pelo aluno\" });\r\n    //   setOpen(true); \r\n\r\n    } else if(values.Endereco.Logradouro ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o logradouro do endereço\" });\r\n      setOpen(true); \r\n    } else if(values.Endereco.Numero ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o número do endereço\" });\r\n      setOpen(true); \r\n    } else if(values.Endereco.Cidade ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar a cidade do endereço\" });\r\n      setOpen(true); \r\n    } else if(values.Endereco.Bairro ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o bairro do endereço\" });\r\n      setOpen(true); \r\n    } else if(values.Endereco.Estado ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o estado do endereço\" });\r\n      setOpen(true); \r\n    } else if(values.Endereco.CEP ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o CEP do endereço\" });\r\n      setOpen(true); \r\n    } else if(values.MateriaAlunos.length === 0){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário selecionar pelo menos uma matéria\" });\r\n      setOpen(true); \r\n    } else if(values.ServicoId ===\"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário selecionar o serviço contratado\" });\r\n      setOpen(true); \r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(\r\n    function () {\r\n      if (alunoResponse.data != null) {        \r\n\r\n        var materias = []\r\n        alunoResponse.data.materiaAlunos.map((materia => (\r\n          materias.push({ MateriaId: materia.materiaId })\r\n        )))\r\n\r\n        setValues((prevState) => ({\r\n          Id: alunoResponse.data.id,\r\n          Nome: alunoResponse.data.nome,\r\n          DataNascimento: format(new Date(alunoResponse.data.dataNascimento), 'yyyy-MM-dd'),\r\n          Serie: alunoResponse.data.serie,\r\n          Escola: alunoResponse.data.escola,\r\n          NomeResponsavel: alunoResponse.data.nomeResponsavel,\r\n          CPFResponsavel: alunoResponse.data.cpfResponsavel,\r\n          TelefoneResponsavel: alunoResponse.data.telefoneResponsavel,\r\n          EmailResponsavel: alunoResponse.data.emailResponsavel,\r\n          Endereco: {\r\n            Logradouro: alunoResponse.data.endereco.logradouro,\r\n            Numero: alunoResponse.data.endereco.numero,\r\n            Complemento: alunoResponse.data.endereco.complemento,\r\n            Bairro: alunoResponse.data.endereco.bairro,\r\n            Cidade: alunoResponse.data.endereco.cidade,\r\n            Estado: alunoResponse.data.endereco.estado,\r\n            CEP: alunoResponse.data.endereco.cep,\r\n          },\r\n          ServicoId: alunoResponse.data.servicoId,\r\n          EmpresaId: alunoResponse.data.empresaId,\r\n          MateriaAlunos: materias,\r\n          DiaVencimento: alunoResponse.data.diaVencimento\r\n        }));\r\n      }\r\n    },\r\n    [alunoResponse]\r\n  );\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: e.target.value });\r\n  };\r\n\r\n  const handleEndereco = (e) => {\r\n    const { name, value } = e.target;\r\n    const Endereco = { ...values.Endereco };\r\n\r\n    if (name === \"Logradouro\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Logradouro\") Endereco[key] = value;\r\n      });\r\n    } else if (name === \"Numero\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Numero\") Endereco[key] = value;\r\n      });\r\n    } else if (name === \"Complemento\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Complemento\") Endereco[key] = value;\r\n      });\r\n    } else if (name === \"Bairro\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Bairro\") Endereco[key] = value;\r\n      });\r\n    } else if (name === \"Cidade\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Cidade\") Endereco[key] = value;\r\n      });\r\n    } else if (name === \"Estado\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Estado\") Endereco[key] = value;\r\n      });\r\n    } else if (name === \"CEP\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"CEP\") Endereco[key] = value;\r\n      });\r\n    }\r\n\r\n    setValues({ ...values, Endereco });\r\n  };\r\n\r\n  const handleMateria = (e) => {\r\n    const { name, value, checked } = e.target;\r\n\r\n    var MateriaAlunos = [...values.MateriaAlunos]; //matérias que tem atualmente\r\n    const materiaIdIndex = value.search(\"id\");\r\n    const index = value.substring(6, materiaIdIndex - 1);\r\n    const materiaId = value.substring(materiaIdIndex + 3);\r\n    var newValues = \"\";\r\n\r\n    //se desmarcar checkbox da matéria\r\n    if (checked === false) {\r\n      //se encontrar materiaId no array, faz filter e tira\r\n      MateriaAlunos = MateriaAlunos.filter((n) => n.MateriaId != materiaId);\r\n      setValues({ ...values, MateriaAlunos });\r\n    }\r\n\r\n    //se marcar checkbox da matéria\r\n    if (checked === true) {\r\n      //adiciona materia no array\r\n      MateriaAlunos.push({ MateriaId: materiaId });\r\n      setValues({ ...values, MateriaAlunos });\r\n    }\r\n  };\r\n\r\n  function checkMateria(id) {\r\n    var checkMateria = [...values.MateriaAlunos]\r\n    var matIds = []\r\n    checkMateria.map((mat, i) => (\r\n      matIds.push(Object.values(mat))\r\n    ))\r\n    if (matIds.find(e => e == id)) {\r\n      return true\r\n    } else\r\n      return false\r\n  }\r\n\r\n  function handleSubmit(e) {  \r\n    document.getElementById(\"div-loading\").style.display = \"block\";\r\n \r\n    const response = fetch(`${ url }/api/v1/alunos/`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: 'Bearer '+token,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(values),\r\n    })\r\n    \r\n    .then( async (response) => {\r\n      if(response.ok){\r\n        let data = await response.json();\r\n        setMensagem({ ...values, title: \"Sucesso!\", text: data })\r\n        setOpen(true);\r\n      }else{\r\n        let data = await response.json();\r\n        setMensagem({ ...values, title: \"Erro!\", text: data })\r\n        setOpen(true);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })\r\n    document.getElementById(\"div-loading\").style.display = \"none\";   \r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          <div className={classes.titulo}>\r\n            <h1>Cadastro de Aluno</h1>\r\n          </div>\r\n\r\n          <form onSubmit={handleSubmit}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <div className={classes.subtitulo}>\r\n                  <h4>Dados do Aluno</h4>\r\n                  <Divider />\r\n                </div>\r\n              </Grid>\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  id=\"Nome\"\r\n                  name=\"Nome\"\r\n                  label=\"Nome Aluno\"\r\n                  required={true}\r\n                  fullWidth\r\n                  onChange={(e) => { handleChange(onlyLetters(e)) }}\r\n                  value={values.Nome}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={3}>\r\n                <TextField\r\n                  id=\"DataNascimento\"\r\n                  name=\"DataNascimento\"\r\n                  label=\"Data Nascimento\"\r\n                  type=\"date\"\r\n                  required={true}\r\n                  \r\n                  onChange={(e) => { handleChange(dateFormat(e)) }}\r\n                  value={values.DataNascimento}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"Serie\"\r\n                  name=\"Serie\"\r\n                  label=\"Serie\"\r\n                  \r\n                  onChange={handleChange}\r\n                  value={values.Serie}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={3}>\r\n                <TextField\r\n                  id=\"Escola\"\r\n                  name=\"Escola\"\r\n                  label=\"Escola\"\r\n                  \r\n                  onChange={(e) => { handleChange(onlyLetters(e)) }}\r\n                  value={values.Escola}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  id=\"NomeResponsavel\"\r\n                  name=\"NomeResponsavel\"\r\n                  label=\"Nome Responsável\"\r\n                  required={true}\r\n                  fullWidth\r\n                  onChange={(e) => { handleChange(onlyLetters(e)) }}\r\n                  value={values.NomeResponsavel}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"CPFResponsavel\"\r\n                  name=\"CPFResponsavel\"\r\n                  label=\"CPF\"\r\n                  \r\n                  onChange={(e) => { handleChange(cpfMask(e)) }}\r\n                  value={values.CPFResponsavel}\r\n                  fullWidth\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"TelefoneResponsavel\"\r\n                  name=\"TelefoneResponsavel\"\r\n                  label=\"Telefone\"\r\n                  \r\n                  onChange={(e) => { handleChange(phoneMask(e)) }}\r\n                  value={values.TelefoneResponsavel}\r\n                  fullWidth\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </Grid>              \r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  id=\"EmailResponsavel\"\r\n                  name=\"EmailResponsavel\"\r\n                  label=\"E-mail\"\r\n                  onChange={handleChange}\r\n                  \r\n                  value={values.EmailResponsavel}\r\n                  fullWidth\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <div className={classes.subtitulo}>\r\n                  <h4>Endereço</h4>\r\n                  <Divider />\r\n                </div>\r\n              </Grid>\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  id=\"Endereco.Logradouro\"\r\n                  name=\"Logradouro\"\r\n                  required={true}\r\n                  onChange={handleEndereco}\r\n                  value={values.Endereco.Logradouro}\r\n                  label=\"Logradouro\"\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={1}>\r\n                <TextField\r\n                  id=\"Endereco.Numero\"\r\n                  name=\"Numero\"\r\n                  label=\"Nº\"                  \r\n                  onChange={(e) => { handleEndereco(onlyNumbersMax5(e)) }}\r\n                  value={values.Endereco.Numero}\r\n                  fullWidth\r\n                  required={true}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={3}>\r\n                <TextField\r\n                  id=\"Endereco.Complemento\"\r\n                  name=\"Complemento\"\r\n                  label=\"Complemento\"\r\n                  onChange={handleEndereco}\r\n                  value={values.Endereco.Complemento}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"Endereco.Cidade\"\r\n                  name=\"Cidade\"\r\n                  label=\"Cidade\"\r\n                  required={true}\r\n                  onChange={handleEndereco}\r\n                  value={values.Endereco.Cidade}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"Endereco.Bairro\"\r\n                  name=\"Bairro\"\r\n                  required={true}\r\n                  onChange={handleEndereco}\r\n                  value={values.Endereco.Bairro}\r\n                  label=\"Bairro\"\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"Endereco.Estado\"\r\n                  name=\"Estado\"\r\n                  label=\"Estado\"\r\n                  required={true}\r\n                  onChange={handleEndereco}\r\n                  value={values.Endereco.Estado}\r\n                  fullWidth\r\n                  select\r\n                >\r\n                  <MenuItem value=\"AC\">Acre</MenuItem>\r\n                  <MenuItem value=\"AL\">Alagoas</MenuItem>\r\n                  <MenuItem value=\"AP\">Amapá</MenuItem>\r\n                  <MenuItem value=\"AM\">Amazonas</MenuItem>\r\n                  <MenuItem value=\"BA\">Bahia</MenuItem>\r\n                  <MenuItem value=\"CE\">Ceará</MenuItem>\r\n                  <MenuItem value=\"DF\">Distrito Federal</MenuItem>\r\n                  <MenuItem value=\"ES\">Espírito Santo</MenuItem>\r\n                  <MenuItem value=\"GO\">Goiás</MenuItem>\r\n                  <MenuItem value=\"MA\">Maranhão</MenuItem>\r\n                  <MenuItem value=\"MT\">Mato Grosso</MenuItem>\r\n                  <MenuItem value=\"MS\">Mato Grosso do Sul</MenuItem>\r\n                  <MenuItem value=\"MG\">Minas Gerais</MenuItem>\r\n                  <MenuItem value=\"PA\">Pará</MenuItem>\r\n                  <MenuItem value=\"PB\">Paraíba</MenuItem>\r\n                  <MenuItem value=\"PR\">Paraná</MenuItem>\r\n                  <MenuItem value=\"PE\">Pernambuco</MenuItem>\r\n                  <MenuItem value=\"PI\">Piauí</MenuItem>\r\n                  <MenuItem value=\"RJ\">Rio de Janeiro</MenuItem>\r\n                  <MenuItem value=\"RN\">Rio Grande do Norte</MenuItem>\r\n                  <MenuItem value=\"RS\">Rio Grande do Sul</MenuItem>\r\n                  <MenuItem value=\"RO\">Rondônia</MenuItem>\r\n                  <MenuItem value=\"RR\">Roraima</MenuItem>\r\n                  <MenuItem value=\"SC\">Santa Catarina</MenuItem>\r\n                  <MenuItem value=\"SP\">São Paulo</MenuItem>\r\n                  <MenuItem value=\"SE\">Sergipe</MenuItem>\r\n                  <MenuItem value=\"TO\">Tocantins</MenuItem>\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"Endereco.CEP\"\r\n                  name=\"CEP\"\r\n                  label=\"CEP\"\r\n                  \r\n                  onChange={(e) => { handleEndereco(cepMask(e)) } }\r\n                  value={values.Endereco.CEP}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <div className={classes.subtitulo}>\r\n                  <h4>Matérias</h4>\r\n                  <Divider />\r\n                </div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>                \r\n                {\r\n                  materiasResponse.data ?\r\n                    (\r\n                      materiasResponse.data.map((mat, j) => (\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox\r\n                              name={`MateriaAlunos${[]}.MateriaId`}\r\n                              onChange={handleMateria}                              \r\n                              value={`index:${j},id:${mat.id}`}\r\n                              checked={checkMateria(mat.id)}\r\n                            />\r\n                          }\r\n                          label={mat.nome}\r\n                        />\r\n                      ))) : false\r\n                }\r\n                \r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <div className={classes.subtitulo}>\r\n                  <h4>Serviço Contratado</h4>\r\n                  <Divider />\r\n                </div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Select\r\n                  id=\"Servico\"\r\n                  label=\"Servico Contratado\"\r\n                  onChange={handleChange}\r\n                  name=\"ServicoId\"\r\n                  \r\n                  value={values.ServicoId}\r\n\r\n                >\r\n                  {servicosResponse.data ? (\r\n\r\n                    servicosResponse.data.map((serv) => (\r\n                      <MenuItem value={serv.id}>\r\n                        {serv.descricao + \" - Valor: R$\" + serv.valor}\r\n                      </MenuItem>\r\n                    ))) : false\r\n                  }\r\n                </Select>\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <TextField\r\n                  id=\"DiaVencimento\"\r\n                  name=\"DiaVencimento\"\r\n                  label=\"Dia Vencimento\"                  \r\n                  onChange={(e) => { handleChange(dayNumber(e)) }}\r\n                  value={values.DiaVencimento}\r\n                  type=\"text\"\r\n                  fullWidth \r\n                  inputProps={{  maxLength: 2, inputMode: 'numeric', pattern: '[0-9]*'  }}               \r\n                  InputLabelProps={{\r\n                    shrink: true                    \r\n                  }}\r\n                  \r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <div classname={classes.buttons}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"inherit\"\r\n                className={classes.button}\r\n              >\r\n                Limpar\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"                \r\n                onClick={handleClickOpen}\r\n                className={classes.button}\r\n              >\r\n                Cadastrar\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"                \r\n                onClick={gerarContrato}\r\n                className={classes.button}\r\n              >\r\n                Contrato\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </Paper>\r\n        <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{mensagem.title}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {mensagem.text}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          {(mensagem.text == \"Aluno cadastrado\") ?     \r\n          <Button onClick={() => { handleClose(); history.push(\"/alunos\"); }}>Ok</Button>\r\n           : <Button onClick={handleClose}>Ok</Button>}          \r\n        </Dialog>        \r\n      </main>\r\n     <Loader/>   \r\n    </React.Fragment>\r\n   \r\n  );\r\n}\r\n\r\nexport default CadastroAluno;\r\n","C:\\Git\\MeuAlunoReact\\src\\views\\Aluno\\Alunos.jsx",[],"C:\\Git\\MeuAlunoReact\\src\\views\\Servico\\Servicos.jsx",["231","232"],"import React , { useContext } from \"react\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./Servicos.css\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { url } from \"../../../src/variaveis\";\r\nimport { onlyLetters, currencyMask, currencyMaskList } from \"../../utils/mask\";\r\n\r\nconst Servicos = () => {\r\n  const history = useHistory();\r\n  const { token, userLogged } = useContext(StoreContext); \r\n  const response = useFetch(`${ url }/api/v1/servicos/empresa/${userLogged.empresaId}`,\"get\",token); \r\n  \r\n  function novoServico() {\r\n    history.push(\"/cadastroServico\");\r\n  }\r\n\r\n  function editarServico(id) {\r\n    history.push(`/cadastroServico/${id}`);\r\n  }\r\n\r\n  function showServicos(servicos) {\r\n    return servicos.map((servico) => (      \r\n      <tr onClick={() => editarServico(servico.id)}>\r\n        <td key={servico.id}>{servico.id}</td>\r\n        <td key={servico.descricao}>{servico.descricao}</td>\r\n        <td key={servico.valor}>{currencyMaskList(parseFloat(servico.valor).toFixed(2))}</td>\r\n        <td key={servico.qtdAulas}>{servico.qtdAulas}</td>\r\n        <td key={servico.fidelidade}>{servico.fidelidade ? \"SIM\" : \"NÃO\"}</td>\r\n      </tr>\r\n    ));\r\n  }\r\n  return (\r\n    <div className=\"lista-servicos\">\r\n      <h1>Serviços</h1>\r\n      <div className=\"btn-novo\">\r\n          <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                onClick={novoServico}\r\n                className=\"btn-novo\"                \r\n              >\r\n                Novo Serviço\r\n              </Button>\r\n          </div>\r\n      <table id=\"servicos\">\r\n        <tbody>\r\n          <tr>\r\n            <th>Id</th>\r\n            <th>Descrição</th>\r\n            <th>Valor</th>\r\n            <th>Qtd. Aulas</th>\r\n            <th>Fidelidade</th>\r\n          </tr>\r\n          {response.data ? showServicos(response.data) : false}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Servicos;\r\n","C:\\Git\\MeuAlunoReact\\src\\views\\Servico\\CadastroServico.jsx",["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273"],"import React, { useContext, useState, useEffect, Component } from \"react\";\r\nimport { Formik, Field, Form, useFormik, FieldArray } from \"formik\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { useHistory } from \"react-router\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport ScopedCssBaseline from \"@material-ui/core/ScopedCssBaseline\";\r\nimport lifecycle, { componentDidMount, componentDidUpdate } from 'react-pure-lifecycle';\r\nimport Loader from \"../../utils/loader\";\r\n\r\nimport {\r\n  Button,\r\n  Divider,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  InputLabel,\r\n  ListItemText,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Switch,\r\n  TextField,\r\n  Typography,\r\n  withStyles,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Dialog,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport { purple } from \"@material-ui/core/colors\";\r\nimport { currencyMask, onlyLetters, currencyMaskList } from \"../../utils/mask\";\r\nimport { url } from \"../../../src/variaveis\";\r\n\r\nfunction CadastroServico() {\r\n  const { token, userLogged } = useContext(StoreContext);\r\n  const aulasResponse = useFetch(`${ url }/api/v1/aulas/empresa/${userLogged.empresaId}`,\"get\",token);\r\n  const history = useHistory();\r\n  const editarServicoId = window.location.pathname.split(\"/\");\r\n  var editarServicoUrl = \"\";\r\n\r\n  if (editarServicoId[2] != null) {\r\n    editarServicoUrl = `${ url }/api/v1/servicos/${editarServicoId[2]}`;\r\n  }\r\n\r\n  const servicoResponse = useFetch(editarServicoUrl,\"get\",token);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const initialValues = {\r\n    Id: 0,\r\n    Descricao: \"\",\r\n    Valor: \"\",\r\n    Fidelidade: false,\r\n    TipoMulta: 0,\r\n    ValorMulta: \"\",\r\n    EmpresaId: userLogged.empresaId,\r\n    QtdAulas: \"\",\r\n    ServicosAulas: [],\r\n  };\r\n\r\n  const [values, setValues] = useState(initialValues);\r\n  const alertas = {\r\n    text: \"\",\r\n    title: \"\"\r\n  }\r\n  const [mensagem, setMensagem] = useState(alertas);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const validadorServicosAulas = () => {\r\n    var validador = false;    \r\n    for (var i = 0; i < values.QtdAulas; i++) {      \r\n      if (values.ServicosAulas[i] != null && values.ServicosAulas[i].AulaId == \"\") {\r\n        validador = false;\r\n      }\r\n      else {\r\n        validador = true;\r\n      }\r\n    }    return validador;\r\n  }\r\n\r\n  const validadorForm = () => {\r\n    if (values.Descricao == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário selecionar uma descrição\" });\r\n      setOpen(true);\r\n    } else if (values.Valor == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar valor\" });\r\n      setOpen(true);\r\n    } else if (values.QtdAulas == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar quantidade de aulas\" });\r\n      setOpen(true);\r\n    } else if (values.ServicosAulas[0].AulaId == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário selecionar pelo menos uma aula\" });\r\n      setOpen(true);\r\n    } else if (values.QtdAulas > 0 && !validadorServicosAulas()) {\r\n      for (var i = 0; i <= values.QtdAulas; i++) {\r\n        if (values.ServicosAulas[i] != null && values.ServicosAulas[i].AulaId == \"\") {\r\n          setMensagem({ ...values, title: \"Alerta!\", text: \"Falta selecionar aula do serviço\" });\r\n          setOpen(true);\r\n        }\r\n      }  \r\n    } else if (values.Fidelidade == true && (values.TipoMulta == \"\" || values.ValorMulta == \"\")){\r\n        if(values.TipoMulta == \"\"){\r\n          setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar tipo de multa quando tem fidelidade\" });\r\n          setOpen(true);\r\n        }\r\n        if(values.ValorMulta == \"\"){\r\n          setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar valor de multa quando tem fidelidade\" });\r\n          setOpen(true);\r\n        } \r\n    }  else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  const handleClickOpen = () => {\r\n    if (validadorForm())  {        \r\n        handleSubmit();\r\n      }\r\n      else {\r\n        console.log(\"form invalido\");\r\n      }      \r\n    }     \r\n       \r\n  \r\n  const methods = {\r\n    componentDidUpdate(isFormValid) {\r\n      return true;\r\n    }\r\n  };\r\n\r\nconst handleClose = () => {\r\n  setOpen(false);\r\n};\r\n\r\nuseEffect(\r\n  function () {\r\n    if (servicoResponse.data != null) {\r\n      var servicos = [];\r\n      servicoResponse.data.servicosAulas.map((servico) =>\r\n        servicos.push({ AulaId: servico.aulaId })\r\n      );\r\n\r\n      setValues((prevState) => ({\r\n        Id: servicoResponse.data.id,\r\n        Descricao: servicoResponse.data.descricao,\r\n        Valor: currencyMaskList(parseFloat(servicoResponse.data.valor).toFixed(2)),\r\n        TipoMulta: servicoResponse.data.tipoMulta,\r\n        Fidelidade: servicoResponse.data.fidelidade,\r\n        EmpresaId: servicoResponse.data.empresaId,\r\n        ValorMulta: servicoResponse.data.valorMulta,\r\n        ServicosAulas: servicos,\r\n        QtdAulas: servicoResponse.data.qtdAulas,\r\n      }));\r\n    }\r\n  },\r\n  [servicoResponse]\r\n);\r\n\r\nuseEffect(\r\n  function () {\r\n    if (values.QtdAulas > 0) {\r\n      const ServicosAulas = [...values.ServicosAulas];\r\n      const QtdAulas = values.QtdAulas || 0;\r\n      const previousNumber = ServicosAulas.length || 0;\r\n      if (previousNumber < QtdAulas) {\r\n        for (let i = previousNumber; i < QtdAulas; i++) {\r\n          ServicosAulas.push({ AulaId: \"\" });\r\n        }\r\n      } else {\r\n        for (let i = previousNumber; i >= QtdAulas; i--) {\r\n          ServicosAulas.splice(i, 1);\r\n        }\r\n      }\r\n      setValues({ ...values, ServicosAulas });\r\n    }\r\n  },\r\n  [values.QtdAulas]\r\n);\r\n\r\nconst handleChange = (e) => {  \r\n  var { name, value } = e.target;  \r\n  setValues({ ...values, [name]: value });\r\n};\r\n\r\nconst handleCheckChange = (e) => {\r\n  const { name, checked } = e.target;\r\n  setValues({ ...values, [name]: e.target.checked });\r\n};\r\n\r\nconst handleChangeAula = (e) => {\r\n  const { name, value, index, select } = e.target;\r\n  const AulaIdIndex = name.substring(13, 14);\r\n  var ServicosAulas = [...values.ServicosAulas]; //servicos que tem atualmente\r\n  ServicosAulas.splice(AulaIdIndex, 1, { AulaId: value }); //preencher item selecionado\r\n  setValues({ ...values, ServicosAulas });\r\n};\r\n\r\n\r\nconst tratarDecimal = (e) => {\r\n  if(e == 0)\r\n  return 0\r\n  else\r\n  return e.replace(\".\",\"\").replace(\",\",\".\");\r\n}\r\n\r\nfunction handleSubmit(e) {\r\n  setLoading(true);\r\n  var dados = values;\r\n  dados.Valor = tratarDecimal(values.Valor);\r\n  dados.ValorMulta = tratarDecimal(values.ValorMulta);\r\n  document.getElementById(\"div-loading\").style.display = \"block\";\r\n\r\n  const response = fetch(`${ url }/api/v1/servicos`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: 'Bearer  '+token,\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(dados),\r\n  })\r\n  .then( async (response) => {\r\n    if(response.ok){\r\n      let data = await response.json();\r\n      setMensagem({ ...values, title: \"Sucesso!\", text: data })\r\n      setOpen(true);\r\n    }else{\r\n      let data = await response.json();\r\n      setMensagem({ ...values, title: \"Erro!\", text: data })\r\n      setOpen(true);\r\n    }\r\n  })\r\n  .catch((err) => {\r\n      console.log(err);\r\n  })\r\n  document.getElementById(\"div-loading\").style.display = \"none\";   \r\n}\r\n\r\nconst classes = useStyles();\r\n\r\nreturn (\r\n  <React.Fragment>\r\n    <main className={classes.layout}>\r\n      <Paper className={classes.paper}>\r\n        <form>\r\n          <div className={classes.titulo}>\r\n            <h1>Cadastro de Serviço</h1>\r\n          </div>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <div className={classes.subtitulo}>\r\n                <h4>Dados do Serviço</h4>\r\n                <Divider />\r\n              </div>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={10}>\r\n              <TextField\r\n                id=\"Descricao\"\r\n                name=\"Descricao\"\r\n                label=\"Descrição\"\r\n                value={values.Descricao}\r\n                onChange={handleChange}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={2}>\r\n              <TextField              \r\n                id=\"Valor\"\r\n                name=\"Valor\"\r\n                label=\"Valor\"                \r\n                fullWidth\r\n                value={values.Valor}\r\n                onChange={(e) => handleChange(currencyMask(e))}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={2}>\r\n              <FormLabel>Fidelidade</FormLabel>\r\n\r\n              <Switch\r\n                color=\"primary\"\r\n                name=\"Fidelidade\"\r\n                value={values.Fidelidade}\r\n                checked={values.Fidelidade}\r\n                onChange={handleCheckChange}\r\n                inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n              { values.Fidelidade ? \r\n              (\r\n                <> \r\n                <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"TipoMulta\"\r\n                  name=\"TipoMulta\"\r\n                  label=\"Tipo de Multa\"\r\n                  fullWidth\r\n                  value={values.TipoMulta}\r\n                  onChange={handleChange}\r\n                  select\r\n                >\r\n                  <MenuItem value=\"1\">Percentual</MenuItem>\r\n                  <MenuItem value=\"2\">Fixo</MenuItem>\r\n                </TextField>\r\n              </Grid>\r\n               <Grid item xs={12} sm={2}>\r\n               <TextField\r\n                 id=\"ValorMulta\"\r\n                 name=\"ValorMulta\"\r\n                 label=\"Valor Multa\"\r\n                 value={values.ValorMulta}\r\n                 onChange={(e) => handleChange(currencyMask(e))}\r\n                 fullWidth\r\n               />\r\n             </Grid> \r\n             </>             \r\n              )\r\n            : false }\r\n          \r\n\r\n           \r\n\r\n            <Grid item xs={12} sm={2}>\r\n              <TextField\r\n                id=\"QtdAulas\"\r\n                name=\"QtdAulas\"\r\n                label=\"Qtd. Aulas\"\r\n                fullWidth\r\n                select\r\n                value={values.QtdAulas}\r\n                onChange={handleChange}\r\n              >\r\n                {[1, 2, 3, 4, 5, 6, 7].map((i) => (\r\n                  <MenuItem value={i}>{i}</MenuItem>\r\n                ))}\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <div className={classes.subtitulo}>\r\n                <h4>Aulas do Serviço</h4>\r\n                <Divider />\r\n              </div>\r\n            </Grid>\r\n\r\n            {values.ServicosAulas.map((ServicosAula, j) => (\r\n              <Grid item xs={12} sm={3}>\r\n                <FormControl className={classes.formControl}>\r\n                  <div>\r\n                    <h5 className=\"card-title\">Aula {j + 1}</h5>\r\n                    <Select\r\n                      onChange={handleChangeAula}\r\n                      name={`ServicosAulas${[j]}.AulaId`}\r\n                      value={values.ServicosAulas[j].AulaId}\r\n                    >\r\n                      {aulasResponse.data.map((aula, i) => (\r\n                        <MenuItem\r\n                          key={i}\r\n                          value={aula.id}\r\n                        >\r\n                          {aula.dia +\r\n                            \" (\" +\r\n                            aula.horaInicio +\r\n                            \"-\" +\r\n                            aula.horaFim +\r\n                            \")\"}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </div>\r\n                </FormControl>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n\r\n          <div className={classes.buttons}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"inherit\"\r\n              className={classes.button}\r\n            >\r\n              Limpar\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleClickOpen}\r\n              className={classes.button}\r\n              disabled={loading}\r\n            >\r\n              Cadastrar\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Paper>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{mensagem.title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {mensagem.text}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        {(mensagem.text == \"Serviço cadastrado\" || mensagem.text == \"Serviço atualizado\") ?\r\n          <Button onClick={() => { handleClose(); history.push(\"/servicos\"); }}>Ok</Button>\r\n          : <Button onClick={handleClose}>Ok</Button>}\r\n\r\n      </Dialog>\r\n    </main>\r\n    <Loader/>\r\n  </React.Fragment>\r\n);\r\n                          }\r\nexport default CadastroServico;\r\n","C:\\Git\\MeuAlunoReact\\src\\components\\menu\\Menu.jsx",["274","275","276"],"import React ,{useState, useContext} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MenuItemAdmin, MenuItemCliente } from './MenuItem';\r\nimport StoreContext from '../../contexts/StoreContext';\r\n\r\n\r\nconst Menu = (props) => {\r\nconst [sidebar,setSidebar] = useState(false);\r\nconst showSidebar = () => setSidebar(!sidebar);\r\nconst { token, userLogged } = useContext(StoreContext);\r\n\r\n if(userLogged.tipoUsuario == 1){\r\n    return (   \r\n        <div className=\"rf-menu__content\">    \r\n            {MenuItemAdmin.map((item,index) => {\r\n                return (\r\n                    <div key={index} className={\"rf-wid-100\"}>\r\n                        <Link to={item.path} className={\"rf-wid-100\"}>\r\n                            <span className={item.cName}>{item.title}</span>\r\n                        </Link>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>   \r\n        ) \r\n }else {\r\n    return (   \r\n        <>    \r\n            {MenuItemCliente.map((item,index) => {\r\n                return (\r\n                    <div key={index} className={\"rf-wid-100\"}>\r\n                        <Link to={item.path} className={\"rf-wid-100\"}>\r\n                            <span className={item.cName}>{item.title}</span>\r\n                        </Link>\r\n                    </div>\r\n                )\r\n            })}  \r\n        </>   \r\n        ) \r\n }\r\n\r\n\r\n}\r\n\r\nexport default Menu;\r\n","C:\\Git\\MeuAlunoReact\\src\\views\\Materia\\CadastroMateria.jsx",["277","278","279","280","281","282","283"],"import { Button, Grid, Paper, TextField,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,  \r\n  Dialog,\r\n  } from \"@material-ui/core\";\r\nimport { url } from \"../../../src/variaveis\";\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Loader from \"../../utils/loader\";\r\n\r\n\r\nfunction CadastroMateria() {\r\n  const { token, userLogged } = useContext(StoreContext);  \r\n  const [open, setOpen] = useState(false);\r\n  const history = useHistory();\r\n      //montar URL para editar matéria\r\n      var editando = false;\r\n      var editarMateriaUrl = \"\";    \r\n      const editarMateriaId = window.location.pathname.split(\"/\");\r\n      if (editarMateriaId[2] != null){\r\n        editarMateriaUrl =  `${url}/api/v1/materias/${editarMateriaId[2]}`;  \r\n        editando = true;    \r\n      }\r\n  \r\n      const materiaResponse = useFetch(editarMateriaUrl,\"get\",token);\r\n      const [loading, setLoading] = useState(true);  \r\n\r\n  const initialValues = {\r\n    Id: 0,\r\n    Nome: \"\",\r\n    EmpresaId: userLogged.empresaId,\r\n  };\r\n\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const alertas = {\r\n    text: \"\",\r\n    title: \"\"\r\n  }\r\n\r\n  const [mensagem, setMensagem] = useState(alertas);\r\n\r\n  const handleClickOpen = () => {      \r\n    if (validadorForm()) {\r\n      handleSubmit();      \r\n    } else {\r\n      console.log(\"form inválido\");\r\n    }\r\n  };\r\n\r\n  const validadorForm = () => {\r\n    if(values.Nome == \"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar nome da matéria\" });\r\n      setOpen(true);      \r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(\r\n    function(){\r\n      if (materiaResponse.data != null){\r\n        setValues((prevState) => ({\r\n          Id:  materiaResponse.data.id,\r\n          Nome: materiaResponse.data.nome,\r\n          EmpresaId: materiaResponse.data.empresaId,\r\n        }));\r\n      };\r\n    },\r\n    [materiaResponse]\r\n  );\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: e.target.value });\r\n  };\r\n\r\n  function handleSubmit(e) {      \r\n    document.getElementById(\"div-loading\").style.display = \"block\";\r\n\r\n    const response = fetch(`${url}/api/v1/materias/`, {          \r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: 'Bearer '+token,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(values),\r\n    })\r\n      \r\n    .then( async (response) => {\r\n      if(response.ok){\r\n        let data = await response.json();\r\n        setMensagem({ ...values, title: \"Sucesso!\", text: data })\r\n        setOpen(true);\r\n      }else{\r\n        let data = await response.json();\r\n        setMensagem({ ...values, title: \"Erro!\", text: data })\r\n        setOpen(true);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })\r\n    document.getElementById(\"div-loading\").style.display = \"none\";   \r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          <div className={classes.titulo}>\r\n            <h1>Cadastro de Matéria</h1>\r\n          </div>\r\n          <form >\r\n              <Grid container spacing={3}>\r\n                  <Grid item xs={12}>\r\n                      <TextField \r\n                         id=\"Nome\"\r\n                         name=\"Nome\"\r\n                         label=\"Nome\"\r\n                         fullWidth\r\n                         onChange={handleChange}\r\n                         value={values.Nome}\r\n                      />\r\n                  </Grid>\r\n              </Grid>\r\n              <div className={classes.buttons}>\r\n              {editando\r\n              ? false\r\n              : <Button\r\n              variant=\"contained\"\r\n              color=\"inherit\"\r\n              className={classes.button}\r\n            >\r\n              Limpar\r\n            </Button>}\r\n             \r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleClickOpen}\r\n                className={classes.button}\r\n              >\r\n                {editando ? \"Atualizar\" : \"Cadastrar\"}\r\n              </Button>\r\n            </div>\r\n          </form>        \r\n        </Paper>\r\n        <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{mensagem.title}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {mensagem.text}\r\n            </DialogContentText>\r\n          </DialogContent>          \r\n\r\n          {(mensagem.text == \"Matéria cadastrada\" || mensagem.text == \"Matéria atualizada\") ?     \r\n            <Button onClick={() => { handleClose(); history.push(\"/materias\"); }}>Ok</Button>\r\n             : <Button onClick={handleClose}>Ok</Button>} \r\n          \r\n        </Dialog>\r\n      </main>\r\n      <Loader/>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default CadastroMateria;\r\n","C:\\Git\\MeuAlunoReact\\src\\views\\Materia\\Materias.jsx",["284"],"import React, { useContext } from \"react\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport \"./Materias.css\"\r\nimport { Button } from \"@material-ui/core\";\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport { url } from \"../../../src/variaveis\";\r\n\r\nfunction Materias() {\r\n  const { token, userLogged } = useContext(StoreContext);\r\n\r\n  const response = useFetch(`${ url }/api/v1/materias/empresa/${userLogged.empresaId}`,\"get\",token);\r\n\r\n  const history = useHistory();\r\n\r\n  const classes = useStyles();\r\n\r\n  function novaMateria(){\r\n    history.push(\"/cadastroMateria\")\r\n  }\r\n\r\n  function editarMateria(id){\r\n    history.push(`/cadastroMateria/${id}`)\r\n  }\r\n\r\n  function showMaterias(materias){\r\n    return (\r\n      materias.map((materia) => (\r\n        <tr onClick={() => editarMateria(materia.id)}>\r\n          <td key={materia.id}>{materia.id}</td>      \r\n          <td key={materia.nome}>{materia.nome}</td>          \r\n        </tr>\r\n      ))   \r\n    )\r\n  }\r\n  return (         \r\n        <div className=\"lista-materias\">\r\n          <h1>Matérias</h1>\r\n          <div className=\"btn-novo\">\r\n          <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                onClick={novaMateria}\r\n                className=\"btn-novo\"                \r\n              >\r\n                Nova Matéria\r\n              </Button>\r\n          </div>\r\n         \r\n          <table id=\"materias\">\r\n            <tbody>\r\n              <tr>\r\n                <th>Id</th>                              \r\n                <th>Nome</th>   \r\n              </tr>\r\n              {response.data ? showMaterias(response.data) : false}             \r\n            </tbody>\r\n          </table>\r\n        </div>     \r\n    \r\n  );\r\n}\r\n\r\nexport default Materias;\r\n","C:\\Git\\MeuAlunoReact\\src\\views\\Aula\\CadastroAula.jsx",["285","286","287","288","289","290","291","292","293","294","295","296"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport { Button, \r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Dialog,\r\n  Tooltip, } from \"@material-ui/core\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport { useFetch } from '../../hooks/useFetch';\r\nimport { useHistory } from \"react-router\";\r\nimport { horarioMask, onlyNumbersMax5 } from '../../utils/mask';\r\nimport { url } from \"../../../src/variaveis\";\r\nimport Loader from \"../../utils/loader\";\r\n\r\nfunction CadastroAula(){\r\n    const { token, userLogged } = useContext(StoreContext);      \r\n    const history = useHistory();\r\n    const [open, setOpen] = useState(false);\r\n    //montar URL para editar aula\r\n    var editando = false;\r\n    var editarAulaUrl = \"\";    \r\n    const editarAulaId = window.location.pathname.split(\"/\");\r\n    if (editarAulaId[2] != null){\r\n      editarAulaUrl =  `${ url }/api/v1/aulas/${editarAulaId[2]}`;\r\n      editando = true;      \r\n    }\r\n\r\n    const aulaResponse = useFetch(editarAulaUrl,\"get\",token);\r\n    const [loading, setLoading] = useState(true);  \r\n\r\n    const initialValues = {\r\n      Id: 0,\r\n      Dia: \"\",\r\n      HoraInicio: \"\",\r\n      HoraFim: \"\",\r\n      Vagas: \"\",\r\n      EmpresaId: userLogged.empresaId,\r\n  }\r\n\r\n  const alertas = {\r\n    text: \"\",\r\n    title: \"\"\r\n  }\r\n\r\n  const [mensagem, setMensagem] = useState(alertas);\r\n\r\n  const handleClickOpen = () => {      \r\n    if (validadorForm()) {\r\n      handleSubmit();      \r\n    } else {\r\n      console.log(\"form inválido\");\r\n    }\r\n  };\r\n\r\n  const validadorForm = () => {\r\n    if(values.Dia == \"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar dia da aula\" });\r\n      setOpen(true);      \r\n    } else if(values.HoraInicio == \"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar horário de inicio\" });\r\n      setOpen(true);      \r\n    } else if(values.HoraFim == \"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar horário de fim\" });\r\n      setOpen(true);      \r\n    } else if(values.Vagas == \"\"){\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar quantidade de vagas\" });\r\n      setOpen(true);      \r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n    useEffect(\r\n      function(){\r\n        if (aulaResponse.data != null){\r\n          setValues((prevState) => ({\r\n            Id:  aulaResponse.data.id,\r\n            Dia: aulaResponse.data.dia,\r\n            HoraInicio:  aulaResponse.data.horaInicio,\r\n            HoraFim:  aulaResponse.data.horaFim,\r\n            Vagas:  aulaResponse.data.vagas,\r\n            EmpresaId: aulaResponse.data.empresaId,\r\n          }));\r\n        };\r\n      },\r\n      [aulaResponse]\r\n    );\r\n\r\n    const [values,setValues] = useState(initialValues);\r\n    \r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setValues({...values, [name]: e.target.value});\r\n    }\r\n\r\n    function handleSubmit(e) {   \r\n      document.getElementById(\"div-loading\").style.display = \"block\";\r\n\r\n        const response = fetch(`${ url }/api/v1/aulas`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: 'Bearer '+token,\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(values),\r\n      })\r\n      .then( async (response) => {\r\n        if(response.ok){\r\n          let data = await response.json();\r\n          setMensagem({ ...values, title: \"Sucesso!\", text: data })\r\n          setOpen(true);\r\n        }else{\r\n          let data = await response.json();\r\n          setMensagem({ ...values, title: \"Erro!\", text: data })\r\n          setOpen(true);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n          console.log(err);\r\n      })\r\n      document.getElementById(\"div-loading\").style.display = \"none\";   \r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n          <main className={classes.layout}>\r\n            <Paper className={classes.paper}>\r\n              <div className={classes.titulo}>\r\n                <h1>Cadastro de Aula</h1>\r\n              </div>\r\n              <form onSubmit={handleSubmit}>\r\n                  <Grid container spacing={3}>\r\n                      <Grid item xs={12} sm={3}>\r\n                          <TextField \r\n                             id=\"Dia\"\r\n                             name=\"Dia\"\r\n                             label=\"Dia da Semana\"                             \r\n                             onChange={handleChange}\r\n                             value={values.Dia}\r\n                          />\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                          <TextField \r\n                             id=\"HoraInicio\"\r\n                             name=\"HoraInicio\"\r\n                             label=\"Hora Inicio\"                             \r\n                             onChange={(e) => {handleChange(horarioMask(e))}}\r\n                             value={values.HoraInicio}\r\n                          />\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                          <TextField \r\n                             id=\"HoraFim\"\r\n                             name=\"HoraFim\"\r\n                             label=\"Hora Fim\"                             \r\n                             onChange={(e) => {handleChange(horarioMask(e))}}\r\n                             value={values.HoraFim}\r\n                          />\r\n                      </Grid>\r\n                      <Grid item xs={3}>\r\n                          <TextField \r\n                             id=\"Vagas\"\r\n                             name=\"Vagas\"\r\n                             label=\"Qtd. Vagas\"                             \r\n                             onChange={(e) => {handleChange(onlyNumbersMax5(e))}}\r\n                             value={values.Vagas}\r\n                          />\r\n                      </Grid>\r\n                  </Grid>\r\n                  <div className={classes.buttons}>\r\n              {editando\r\n              ? false\r\n              : <Button\r\n              variant=\"contained\"\r\n              color=\"inherit\"\r\n              className={classes.button}\r\n            >\r\n              Limpar\r\n            </Button>}\r\n             \r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleClickOpen}\r\n                className={classes.button}\r\n              >\r\n                {editando ? \"Atualizar\" : \"Cadastrar\"}\r\n              </Button>\r\n            </div>\r\n              </form>\r\n            </Paper>\r\n            <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{mensagem.title}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {mensagem.text}\r\n            </DialogContentText>\r\n          </DialogContent>          \r\n\r\n          {(mensagem.text == \"Aula cadastrada\" || mensagem.text == \"Aula atualizada\") ?     \r\n            <Button onClick={() => { handleClose(); history.push(\"/aulas\"); }}>Ok</Button>\r\n             : <Button onClick={handleClose}>Ok</Button>} \r\n          \r\n        </Dialog>\r\n          </main>\r\n          <Loader/>\r\n        </React.Fragment>\r\n      );\r\n\r\n}\r\n\r\nexport default CadastroAula;","C:\\Git\\MeuAlunoReact\\src\\views\\Empresa\\Empresa.jsx",["297","298"],"import { Button } from \"@material-ui/core\";\r\nimport React, { useContext } from \"react\";\r\nimport \"./Empresas.css\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport { url } from \"../../../src/variaveis\";\r\n\r\nfunction Empresa() {\r\n\r\n    const { token } = useContext(StoreContext);\r\n    const response = useFetch(`${url}/api/v1/empresas`, \"get\", token);\r\n    const history = useHistory();\r\n    function editarEmpresa(id) {\r\n        history.push(`/cadastroEmpresa/${id}`)\r\n    }\r\n\r\n    function novaEmpresa() {\r\n        history.push(`/cadastroEmpresa`)\r\n    }\r\n\r\n    function showEmpresas(empresas) {\r\n        return (\r\n            empresas.map((empresa) => (\r\n                <>\r\n                    <tr onClick={() => editarEmpresa(empresa.id)}>\r\n                        <td>{empresa.id}</td>\r\n                        <td>{empresa.razaoSocial}</td>\r\n                        <td>{empresa.cnpJ_CPF}</td>\r\n                    </tr>\r\n                    <tr><td className=\"--space\"></td></tr>\r\n                </>\r\n            ))\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"rf-wid-100\">\r\n            <div className=\"rf-wid-100 rf-page__title --frow-centerbetween\">\r\n                <h1 className=\"rf-icon-office\">Empresas</h1>\r\n                <a\r\n                    type=\"submit\"\r\n                    onClick={novaEmpresa}\r\n                    className=\"rf-button-color-client rf-icon-plus\">\r\n                    Nova Empresa\r\n                </a>\r\n            </div>\r\n            <div className=\"rf-wid-100 rf-content\">\r\n                <div className=\"rf-box__content\">\r\n                    <table className=\"rf-wid-100 rf-table\" id=\"empresas\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Id</th>\r\n                                <th>Nome</th>\r\n                                <th>CNPJ</th>\r\n                            </tr>\r\n                            {response.data != null ? showEmpresas(response.data) : false}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Empresa;","C:\\Git\\MeuAlunoReact\\src\\views\\Aula\\Aulas.jsx",["299"],"import { Button } from \"@material-ui/core\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport \"./Aulas.css\"\r\nimport { url } from \"../../../src/variaveis\";\r\n\r\n\r\nfunction Aulas() {\r\n  const { token, userLogged } = useContext(StoreContext); \r\n  const response = useFetch(`${ url }/api/v1/aulas/empresa/${userLogged.empresaId}`, \"get\",token);\r\n\r\n  const history = useHistory();\r\n\r\n  function novaAula() {\r\n    history.push(\"/cadastroaula\");\r\n  }\r\n\r\n  function editarAula(id) {\r\n    history.push(`/cadastroAula/${id}`);\r\n  }\r\n\r\n  \r\n  function showAulas(aulas) {\r\n    return aulas.map((aula) => (\r\n      <tr onClick={() => editarAula(aula.id)}>\r\n        <td>{aula.id}</td>  \r\n        <td>{aula.dia}</td>\r\n        <td>{aula.horaInicio}</td>\r\n        <td>{aula.horaFim}</td>\r\n        <td>{aula.vagas}</td>       \r\n      </tr>\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <div className=\"lista-aulas\">\r\n      <h1>Aulas</h1>\r\n      <div className=\"btn-novo\">\r\n          <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                onClick={novaAula}\r\n                className=\"btn-novo\"                \r\n              >\r\n                Nova Aula\r\n              </Button>\r\n          </div>\r\n      <table id=\"aulas\">\r\n        <tbody>\r\n          <tr>\r\n            <th>Id</th>\r\n            <th>Dia</th>\r\n            <th>Hora Inicio</th>\r\n            <th>Hora Fim</th>\r\n            <th>Vagas</th>           \r\n          </tr>\r\n          {response.data ? showAulas(response.data) : false}          \r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Aulas;\r\n","C:\\Git\\MeuAlunoReact\\src\\views\\Financeiro\\CadastroFinanceiro.jsx",["300","301","302","303","304","305","306","307","308","309","310","311","312","313"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  MenuItem,\r\n  Switch,\r\n  FormLabel,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Dialog,\r\n  Tooltip,\r\n  Collapse,\r\n  InputAdornment    \r\n} from \"@material-ui/core\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { useHistory } from \"react-router\";\r\nimport { format } from \"date-fns\";\r\nimport { currencyMask, onlyLetters, getCurrentDate, dateFormat } from \"../../utils/mask\";\r\nimport { url } from \"../../../src/variaveis\";\r\nimport Loader from \"../../utils/loader\";\r\n\r\nfunction CadastroFinanceiro() {\r\n  const classes = useStyles();\r\n  const { token, userLogged } = useContext(StoreContext);\r\n\r\n  const urlAlunos = `${ url }/api/v1/alunos/empresa/${userLogged.empresaId}`;\r\n \r\n  \r\n  const responseAluno = useFetch(urlAlunos,\"get\",token);\r\n  const [todos, setTodos] = useState(false);\r\n  const [loading,setLoading] = useState(false);\r\n  const [tipoReceber, setTipoDoc] = useState(true);\r\n  const history = useHistory();\r\n\r\n  const editarFinanceiro = window.location.pathname.split(\"/\");\r\n  var editarFinanceiroUrl = \"\";\r\n  var editando = false;\r\n  if (editarFinanceiro[2] != null) {\r\n    editarFinanceiroUrl = `${ url }/api/v1/financeiros/${editarFinanceiro[2]}`;\r\n    editando = true;\r\n  }\r\n  const responseEditarFinanceiro = useFetch(editarFinanceiroUrl,\"get\",token);\r\n\r\n  const initialValues = {\r\n    Id: 0,\r\n    AlunoId: 0,\r\n    AlunoNome: \"\",\r\n    PessoaNome: \"\",\r\n    DataVencimento: \"\",\r\n    qtdProvisionar: 0,\r\n    Valor: \"\",\r\n    FormaPagamento: \"\",\r\n    Situacao: 1,\r\n    EmpresaId: userLogged.empresaId,\r\n    todosAlunos: false,\r\n    Tipo: \"\",\r\n  };\r\n\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const alertas = {\r\n    text: \"\",\r\n    title: \"\"\r\n  }\r\n\r\n  const [mensagem, setMensagem] = useState(alertas);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const validadorForm = () => {\r\n    if (values.AlunoNome == \"\" && values.PessoaNome == \"\" && todos == false) {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário selecionar um aluno ou informar uma pessoa\" });\r\n      setOpen(true);\r\n    } else if (values.Valor == \"\" && !todos) {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar valor\" });\r\n      setOpen(true);\r\n    } else if (values.FormaPagamento == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar forma de pagamento\" });\r\n      setOpen(true);\r\n    } else if (values.DataVencimento == \"\" && !todos) {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar data de vencimento\" });\r\n      setOpen(true);\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  const getDialogActions = (e) => {       \r\n    if (e === \"Atenção!\"){\r\n      return (\r\n        <DialogActions>\r\n              <Button onClick={() =>{ setTodos(false); handleClose()}}>Não</Button>\r\n              <Button onClick={handleClose} autoFocus>Sim</Button>\r\n            </DialogActions>\r\n      )\r\n    } \r\n    else if(e === \"Sucesso!\") {\r\n      return (\r\n        <DialogActions>\r\n      <Button onClick={() => { handleClose(); history.push(\"/financeiros\"); }}>Ok</Button>\r\n      </DialogActions>\r\n      )\r\n      \r\n    } else {\r\n      return (\r\n          <DialogActions>\r\n          <Button onClick={handleClose}>Ok</Button>\r\n      </DialogActions>\r\n      )    \r\n    }\r\n  }\r\n\r\n  useEffect(\r\n    function () {\r\n      if (todos) {\r\n        let hoje = getCurrentDate('-');\r\n        setValues({ ...values, AlunoNome: \"\", qtdProvisionar: 0, todosAlunos: true, Valor: \"0.00\", Tipo: \"1\", DataVencimento: hoje})\r\n      }\r\n      if (!todos) {\r\n        setValues({ ...values, todosAlunos: false })\r\n      }\r\n    },\r\n    [todos]\r\n  )\r\n\r\n  useEffect(\r\n    function () {\r\n      if (responseEditarFinanceiro.data != null) {\r\n        setValues((prevState) => ({\r\n          Id: responseEditarFinanceiro.data.result.id,\r\n          AlunoId: responseEditarFinanceiro.data.result.alunoId,\r\n          AlunoNome: responseEditarFinanceiro.data.result.nomeAluno,\r\n          PessoaNome: responseEditarFinanceiro.data.result.pessoaNome,\r\n          DataVencimento: format(\r\n            new Date(responseEditarFinanceiro.data.result.dataVencimento),\r\n            \"yyyy-MM-dd\"\r\n          ), \r\n          Valor: responseEditarFinanceiro.data.result.valor,\r\n          FormaPagamento: responseEditarFinanceiro.data.result.formaPagamento,\r\n          Situacao: responseEditarFinanceiro.data.result.situacao,\r\n          todosAlunos: false,\r\n          Tipo: responseEditarFinanceiro.data.result.tipo,\r\n          EmpresaId: responseEditarFinanceiro.data.result.empresaId,\r\n        }));\r\n      }\r\n    },\r\n    [responseEditarFinanceiro]\r\n  );\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name == \"AlunoNome\") {\r\n      setValues({ ...values, [name]: e.target.value, AlunoId: e.target.value })\r\n    } else if (name == \"Tipo\" && value != 1) {\r\n      setTipoDoc(false);\r\n      setValues({ ...values, [name]: e.target.value });\r\n    } else if (name == \"Tipo\" && value != 2) {\r\n      setTipoDoc(true);\r\n      setValues({ ...values, [name]: e.target.value });\r\n    }\r\n    else {\r\n      setValues({ ...values, [name]: e.target.value });\r\n    }\r\n  };\r\n\r\n  const handleCheckChange = () => {\r\n    setTodos(!todos);\r\n    if (!todos) {\r\n      setTodos(!todos);\r\n      setValues({ ...values, AlunoId: 0, AlunoNome: \"\" });\r\n      setMensagem({ ...values, title: \"Atenção!\", text: \"Essa ação irá gerar um CRE (contas a receber) para cada aluno. Deseja continuar?\" })\r\n      setOpen(true);\r\n    } else {\r\n      setTodos(!todos);\r\n    }\r\n\r\n  };\r\n\r\n  function showAlunos(alunos) {\r\n    return responseAluno.data.map((aluno) => (\r\n      <MenuItem value={aluno.id}>{aluno.nome}</MenuItem>\r\n    ));\r\n  }\r\n\r\n  const handleClickOpen = () => {\r\n    if (validadorForm()) {\r\n      handleSubmit();\r\n    } else {\r\n      console.log(\"form inválido\");\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  function handleSubmit(e) {  \r\n    setLoading(true);\r\n    var dados = values;\r\n    dados.Valor = dados.Valor.replace('.','');\r\n    dados.Valor = dados.Valor.replace(',','.');\r\n    document.getElementById(\"div-loading\").style.display = \"block\";\r\n\r\n    const response = fetch(`${ url }/api/v1/financeiros`, {          \r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: 'Bearer '+token,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(dados),\r\n    })\r\n    .then( async (response) => {\r\n      if(response.ok){\r\n        let data = await response.json();\r\n        setMensagem({ ...values, title: \"Sucesso!\", text: data })\r\n        setOpen(true);\r\n      }else{\r\n        let data = await response.json();\r\n        setMensagem({ ...values, title: \"Erro!\", text: data })\r\n        setOpen(true);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })\r\n    document.getElementById(\"div-loading\").style.display = \"none\";  \r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          <div className={classes.titulo}>\r\n            <h1>Cadastro de Financeiro</h1>\r\n          </div>\r\n          <form onSubmit={handleSubmit}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={3}>\r\n                <TextField\r\n                  id=\"Tipo\"\r\n                  name=\"Tipo\"\r\n                  label=\"Tipo\"\r\n                  onChange={handleChange}\r\n                  value={values.Tipo}\r\n                  fullWidth\r\n                  select\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"1\">Receber</MenuItem>\r\n                  <MenuItem value=\"2\">Pagar</MenuItem>\r\n\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item xs={12} sm={3}>\r\n                <Collapse in={tipoReceber ? true : false}>\r\n                <Tooltip title={todos ? \"Não pode ser usado para todos alunos\" : \"\"} placement=\"top-end\">\r\n                  <TextField\r\n                    id=\"AlunoNome\"\r\n                    name=\"AlunoNome\"\r\n                    label=\"Aluno\"\r\n                    onChange={handleChange}\r\n                    value={values.AlunoId}\r\n                    inputProps={{\r\n                      \"data-id\": `${values.AlunoId}`,\r\n                    }}\r\n                    disabled={todos ? true : false}\r\n                    fullWidth\r\n                    select                    \r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  >\r\n                    {responseAluno.data ? showAlunos(responseAluno.data) : false}\r\n                  </TextField>\r\n                  </Tooltip>\r\n                </Collapse>\r\n                <Collapse in={tipoReceber ? false : true}>\r\n                  <TextField\r\n                    id=\"PessoaNome\"\r\n                    name=\"PessoaNome\"\r\n                    label=\"Pessoa\"\r\n                    onChange={(e) => handleChange(onlyLetters(e))}\r\n                    value={values.PessoaNome}\r\n                    fullWidth\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  >\r\n                  </TextField>\r\n                </Collapse>\r\n\r\n              </Grid>\r\n              {(editando)\r\n                ? false\r\n                : <Grid item xs={12} sm={2}>\r\n                  <FormLabel>Todos</FormLabel>\r\n                  <Switch\r\n                    color=\"primary\"\r\n                    name=\"todos\"\r\n                    value={todos}\r\n                    checked={todos}\r\n                    disabled={values.Tipo == 2 ? true : false}\r\n                    onChange={handleCheckChange}\r\n                    inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>}\r\n\r\n              <Grid item xs={3}>\r\n              <Tooltip title={todos ? \"Será gerada data específica para cada aluno\" : \"\"} placement=\"top-end\">\r\n                <TextField\r\n                  id=\"DataVencimento\"\r\n                  name=\"DataVencimento\"\r\n                  type=\"date\"\r\n                  label=\"Vencimento\"\r\n                  value={values.DataVencimento}\r\n                  disabled={todos ? true : false}\r\n                  onChange={(e) => { handleChange(dateFormat(e)) }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n                </Tooltip>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={3}>\r\n              <Tooltip title={todos ? \"Não pode ser usado para todos alunos\" : \"\"} placement=\"top-end\">\r\n                <TextField\r\n                  id=\"Valor\"\r\n                  name=\"Valor\"\r\n                  label=\"Valor\"\r\n                  value={values.Valor}\r\n                  onChange={(e) => handleChange(currencyMask(e))}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">R$</InputAdornment>,\r\n                  }}\r\n                  disabled={todos ? true : false}\r\n                />\r\n              </Tooltip>                    \r\n\r\n              </Grid>\r\n              <Grid item xs={2}>\r\n                <TextField\r\n                  id=\"FormaPagamento\"\r\n                  name=\"FormaPagamento\"\r\n                  label=\"Forma de Pagamento\"\r\n                  value={values.FormaPagamento}\r\n                  onChange={handleChange}\r\n                  fullWidth\r\n                  select\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"boleto\">Boleto</MenuItem>\r\n                  <MenuItem value=\"pix\">PIX</MenuItem>\r\n                  <MenuItem value=\"dinheiro\">Dinheiro</MenuItem>\r\n                  <MenuItem value=\"cartão\">Cartão</MenuItem>\r\n                </TextField>\r\n              </Grid>\r\n              {(editando)\r\n                ? false\r\n                : <Grid item xs={2}>\r\n                    <Tooltip title={todos ? \"Não pode ser usado para todos alunos\" : \"\"} placement=\"top-end\">                  \r\n                    <TextField\r\n                      id=\"qtdProvisionar\"\r\n                      name=\"qtdProvisionar\"\r\n                      label=\"Provisionar\"\r\n                      onChange={handleChange}\r\n                      value={values.qtdProvisionar}\r\n                      fullWidth\r\n                      disabled={todos ? true : false}\r\n                      select\r\n                      InputLabelProps={{\r\n                        shrink: true,\r\n                      }}\r\n                    >\r\n                      <MenuItem selected value=\"0\">0</MenuItem>\r\n                      <MenuItem value=\"1\">1</MenuItem>\r\n                      <MenuItem value=\"2\">2</MenuItem>\r\n                      <MenuItem value=\"3\">3</MenuItem>\r\n                      <MenuItem value=\"4\">4</MenuItem>\r\n                      <MenuItem value=\"5\">5</MenuItem>\r\n                      <MenuItem value=\"6\">6</MenuItem>\r\n                      <MenuItem value=\"7\">7</MenuItem>\r\n                      <MenuItem value=\"8\">8</MenuItem>\r\n                      <MenuItem value=\"9\">9</MenuItem>\r\n                      <MenuItem value=\"10\">10</MenuItem>\r\n                      <MenuItem value=\"11\">11</MenuItem>\r\n                      <MenuItem value=\"12\">12</MenuItem>\r\n                    </TextField>\r\n                  </Tooltip>\r\n                </Grid>}\r\n            </Grid>\r\n            <div className={classes.buttons}>\r\n              {editando\r\n                ? false\r\n                : <Button\r\n                  variant=\"contained\"\r\n                  color=\"inherit\"\r\n                  className={classes.button}\r\n                >\r\n                  Limpar\r\n                </Button>}\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleClickOpen}\r\n                className={classes.button}\r\n                disabled={loading}\r\n              >\r\n                {editando ? \"Atualizar\" : \"Cadastrar\"}\r\n              </Button>             \r\n            </div>\r\n          </form>\r\n          \r\n        </Paper>\r\n        <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{mensagem.title}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {mensagem.text}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n            {getDialogActions(mensagem.title)}\r\n        </Dialog>\r\n      </main>\r\n      <Loader/>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default CadastroFinanceiro;\r\n","C:\\Git\\MeuAlunoReact\\src\\views\\Financeiro\\Financeiros.jsx",["314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Button, Checkbox, Dialog, DialogContent, DialogContentText, DialogTitle, Grid, MenuItem, TextField, TablePagination, Table, Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport \"./Financeiros.css\";\r\nimport { onlyLetters, currencyMask, currencyMaskList } from \"../../utils/mask\";\r\nimport { url } from \"../../../src/variaveis\";\r\nimport Loader from \"../../utils/loader\";\r\n\r\n\r\nconst Financeiros = () => {\r\n  const { token, userLogged } = useContext(StoreContext);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [open, setOpen] = useState(false);\r\n  const [listaFinanceiros, setListaFinanceiros] = useState(\"\");\r\n  const [saldoFinanceiro, setSaldoFinanceiro] = useState({\r\n    totalReceber: \"\",\r\n    totalPagar: \"\",\r\n    saldo: \"\"\r\n  })\r\n\r\n  const response = useFetch(`${url}/api/v1/financeiros/empresa/${userLogged.empresaId}`, \"get\", token);\r\n\r\n  const atualizarLista = async () => {\r\ndebugger;\r\n    await fetch(`${url}/api/v1/financeiros/empresa/${userLogged.empresaId}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: 'Bearer ' + token,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }\r\n    })\r\n    \r\n    .then( async (response) => {\r\n      debugger;\r\n      if(response.ok){\r\n        let data = await response.json();      \r\n        setListaFinanceiros(data)\r\n      }else{\r\n        history.push(\"/financeiros\");\r\n      }\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })\r\n       \r\n  }\r\n\r\n  useEffect(async () => {\r\n    var receber = 0;\r\n    var pagar = 0; \r\n    var saldo = 0;\r\n\r\n    if(response.data != null){\r\n      response.data.map((financeiro) => (\r\n        financeiro.tipo == 1 ? receber += financeiro.valor : pagar += financeiro.valor\r\n      ))\r\n      saldo = receber-pagar;\r\n      saldo = saldo.toFixed(2);\r\n    } \r\n    setSaldoFinanceiro({ totalReceber: currencyMask(receber.toString()), totalPagar: currencyMask(pagar.toString()), saldo: currencyMask(saldo.toString()) })\r\n    setListaFinanceiros(response.data);\r\n\r\n  }, [response])\r\n\r\n  var CurrencyFormat = require('react-currency-format');\r\n\r\n  const initialValues = {\r\n    Id: 0,\r\n    AlunoId: 0,\r\n    NomeAluno: \"\",\r\n    DataVencimento: \"\",\r\n    Valor: 0,\r\n    FormaPagamento: \"\",\r\n    Situacao: 0,\r\n    EmpresaId: 0,\r\n  }\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const filtros = {\r\n    VencimentoInicio: \"\",\r\n    VencimentoFim: \"\",\r\n    Pessoa: \"\",\r\n    Tipo: \"\",\r\n    Situacao: \"\",\r\n    EmpresaId: userLogged.empresaId\r\n  }\r\n\r\n  const alertas = {\r\n    text: \"\",\r\n    title: \"\"\r\n  }\r\n\r\n  const [mensagem, setMensagem] = useState(alertas);\r\n\r\n  const handleClickOpen = () => {\r\n    if (validadorForm()) {\r\n      handlePesquisar();\r\n    }\r\n  };\r\n\r\n  const validadorForm = () => {\r\n    if (filtroValues.VencimentoInicio == \"\" && filtroValues.VencimentoFim == \"\" && filtroValues.Pessoa == \"\"\r\n      && filtroValues.Tipo == \"\" && filtroValues.Situacao == \"\") {\r\n      setMensagem({ ...values, title: \"Erro!\", text: \"Informe algum filtro para pesquisar\" })\r\n      setOpen(true);\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [filtroValues, setFiltroValues] = useState(filtros);\r\n  const [itemSelecionado, setItemSelecionado] = useState([]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFiltroValues({ ...filtroValues, [name]: value });\r\n  }\r\n\r\n  const handleCheckChange = (e) => {\r\n    const { name, checked } = e.target;\r\n\r\n    var itens = [...itemSelecionado];\r\n    if (checked) {\r\n      itens.push(name);\r\n    }\r\n    else {\r\n      itens = itens.filter((n) => n != name);\r\n    }\r\n    setItemSelecionado(itens);\r\n  };\r\n\r\n  function liquidar() {\r\n    debugger;\r\n    document.getElementById(\"div-loading\").style.display = \"block\";\r\n\r\n    const response = fetch(`${url}/api/v1/financeiros/liquidar`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: 'Bearer  ' + token,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(itemSelecionado),\r\n    })\r\n\r\n    .then( async (response) => {\r\n      debugger;\r\n      if(response.ok){\r\n        setMensagem({ ...values, title: \"Sucesso!\", text: \"Documentos liquidados.\" });\r\n        setOpen(true);\r\n      }else{\r\n        setMensagem({ ...values, title: \"Erro!\", text: \"Não foi possível liquidar os documentos selecionados.\" });\r\n          setOpen(true);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })    \r\n    document.getElementById(\"div-loading\").style.display = \"none\"; \r\n  }\r\n\r\n  async function excluir() {\r\n\r\n    await Promise.all(itemSelecionado.map(async (item) => {\r\n      const response = await fetch(`${url}/api/v1/financeiros/${item}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          Authorization: 'Bearer  ' + token,\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        }\r\n      })\r\n        .then((response) => response.json())\r\n        .then((response) => {\r\n          if (response != null) {\r\n            setMensagem({ ...values, title: \"Sucesso!\", text: \"Documentos excluídos.\" });\r\n            setOpen(true);\r\n          } else {\r\n            setMensagem({ ...values, title: \"Erro!\", text: \"Não foi possível excluir os documentos selecionados.\" });\r\n            setOpen(true);\r\n          }\r\n        });\r\n    }));\r\n  }\r\n\r\n  function handlePesquisar(e) {\r\n    const response = fetch(`${url}/api/v1/financeiros/buscar`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: 'Bearer  ' + token,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(filtroValues),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        if (response != null) {\r\n          var receber = 0;\r\n          var pagar = 0;\r\n          var saldo = 0;          \r\n          response.map((financeiro) => (\r\n            financeiro.tipo == 1 ? receber += financeiro.valor : pagar += financeiro.valor\r\n          ))\r\n          saldo = receber - pagar;\r\n          saldo = saldo.toFixed(2);\r\n\r\n          setSaldoFinanceiro({ totalReceber: currencyMask(receber.toString()), totalPagar: currencyMask(pagar.toString()), saldo: currencyMask(saldo.toString()) })\r\n\r\n          setListaFinanceiros(response);\r\n        } else {\r\n          setMensagem({ ...values, title: \"Erro!\", text: \"Nenhum documento encontrado com o filtro utilizado\" });\r\n          setOpen(true);\r\n        }\r\n      });\r\n  }\r\n\r\n  function editarFinanceiro(e, id) {\r\n    if (e.target.checked == undefined)\r\n      history.push(`/cadastroFinanceiro/${id}`)\r\n  }\r\n\r\n  function novoFinanceiro() {\r\n    history.push(\"/cadastroFinanceiro\")\r\n  }\r\n\r\n  function showFinanceiros(financeiros) {\r\n     \r\n    if (financeiros != null) {\r\n      return (\r\n        financeiros.map((financeiro) => (         \r\n          \r\n          <tr onClick={(e) => editarFinanceiro(e, financeiro.id)}>\r\n\r\n            {financeiro.situacao == 1 ?\r\n              (\r\n                <td class=\"checkbox\" id=\"checkbox\">\r\n\r\n                  <Checkbox\r\n                    name={financeiro.id}\r\n                    onClick={handleCheckChange}\r\n                    size=\"small\"\r\n                  />\r\n                </td>\r\n              ) : <td></td>}\r\n\r\n            <td key={financeiro.id}>{financeiro.id}</td>\r\n            <td key=\"tipo\">{financeiro.tipo === 1 ? \"Receber\" : \"Pagar\"}</td>\r\n            <td key=\"pessoaNome\">{financeiro.pessoaNome}</td>\r\n            <td key=\"formaPagamento\">{financeiro.formaPagamento}</td>\r\n            <td key=\"dataVencimento\">{format(new Date(financeiro.dataVencimento), 'dd/MM/yyy')}</td>\r\n            <td key=\"valor\">{currencyMaskList(parseFloat(financeiro.valor).toFixed(2))}</td>\r\n            <td id={\"financeiro\" + financeiro.id} key=\"situacao\">{financeiro.situacao == 1 ? \"Em aberto\" : \"Liquidado\"}</td>\r\n          </tr>                \r\n        ))       \r\n      )\r\n    }\r\n    return false\r\n  }\r\n\r\n  return (\r\n    <><div className=\"lista-financeiros\">\r\n      <h1>Financeiro</h1>\r\n\r\n      <div className=\"btn-novo\">\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          onClick={novoFinanceiro}\r\n          className=\"btn-novo\"\r\n        >\r\n          Novo\r\n        </Button>\r\n      </div>\r\n      <div className=\"filtro-financeiros\">\r\n        <Grid container>\r\n          <Grid item xs={12} sm={2}>\r\n            <TextField\r\n              id=\"VencimentoInicio\"\r\n              name=\"VencimentoInicio\"\r\n              type=\"date\"\r\n              label=\"Vencimento Inicio\"\r\n              value={filtroValues.VencimentoInicio}\r\n              onChange={handleChange}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }} />\r\n          </Grid>\r\n          <Grid item xs={12} sm={2}>\r\n            <TextField\r\n              id=\"VencimentoFim\"\r\n              name=\"VencimentoFim\"\r\n              type=\"date\"\r\n              label=\"Vencimento Fim\"\r\n              value={filtroValues.VencimentoFim}\r\n              onChange={handleChange}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }} />\r\n          </Grid>\r\n          <Grid item xs={12} sm={2}>\r\n            <TextField\r\n              id=\"Pessoa\"\r\n              name=\"Pessoa\"\r\n              label=\"Pessoa\"\r\n              value={filtroValues.Pessoa}\r\n              onChange={(e) => (handleChange(onlyLetters(e)))}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            >\r\n            </TextField>\r\n          </Grid>\r\n          <Grid item xs={12} sm={1}>\r\n            <TextField\r\n              id=\"Tipo\"\r\n              name=\"Tipo\"\r\n              label=\"Tipo\"\r\n              select\r\n              value={filtroValues.Tipo}\r\n              onChange={handleChange}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            >\r\n              <MenuItem value=\"0\">Todos</MenuItem>\r\n              <MenuItem value=\"1\">Receber</MenuItem>\r\n              <MenuItem value=\"2\">Pagar</MenuItem>\r\n            </TextField>\r\n          </Grid>\r\n          <Grid item xs={12} sm={2}>\r\n            <TextField\r\n              id=\"Situacao\"\r\n              name=\"Situacao\"\r\n              label=\"Situação\"\r\n              select\r\n              fullWidth\r\n              value={filtroValues.Situacao}\r\n              onChange={handleChange}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            >\r\n              <MenuItem value=\"0\">Todos</MenuItem>\r\n              <MenuItem value=\"1\">Abertos</MenuItem>\r\n              <MenuItem value=\"2\">Liquidados</MenuItem>\r\n            </TextField>\r\n          </Grid>\r\n          <Grid item xs={12} sm={1}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              className=\"btn-pesquisar\"\r\n              disableElevation={true}\r\n              size=\"small\"\r\n              onClick={handleClickOpen}\r\n            >\r\n              Pesquisar\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n\r\n      <table id=\"financeiros\">\r\n        <tbody>\r\n          <tr>\r\n            <th></th>\r\n            <th>Id</th>\r\n            <th>Tipo</th>\r\n            <th>Pessoa</th>\r\n            <th>FOP</th>\r\n            <th>Vencimento</th>\r\n            <th>Valor</th>\r\n            <th>Situação</th>\r\n          </tr>\r\n          {listaFinanceiros ?\r\n            showFinanceiros(listaFinanceiros)\r\n            : false}\r\n\r\n        </tbody>\r\n\r\n      </table>\r\n\r\n      <div className=\"div-saldo\">\r\n        <div className=\"div-saldo-item totalReceber\">\r\n          <p>Total Receber</p>\r\n          <p>R$ {saldoFinanceiro.totalReceber}</p>\r\n        </div>\r\n\r\n        <div className=\"div-saldo-item totalPagar\">\r\n          <p>Total Pagar</p>\r\n          <p>R$ {saldoFinanceiro.totalPagar}</p>\r\n        </div>\r\n\r\n        <div className=\"div-saldo-item saldo\">\r\n          <p>Saldo</p>\r\n          <p>R$ {saldoFinanceiro.saldo}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={`botoes ${classes.button}`} style={{ display: 'flex' }}>\r\n\r\n        <div className={`btn-excluir ${classes.button}`}>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            onClick={excluir}\r\n            className={classes.button}\r\n          >\r\n            Excluir\r\n          </Button>\r\n        </div>\r\n\r\n        <div className={`btn-liquidar ${classes.button}`}>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={liquidar}\r\n            className={classes.button}\r\n          >\r\n            Liquidar\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{mensagem.title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {mensagem.text}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <Button onClick={() => { handleClose(); atualizarLista(); } }>Ok</Button>\r\n      </Dialog>\r\n\r\n    </div><Loader /></>\r\n\r\n  );\r\n}\r\n\r\nexport default Financeiros;\r\n","C:\\Git\\MeuAlunoReact\\src\\views\\Empresa\\CadastroEmpresa.jsx",["336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { url } from \"../../../src/variaveis\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  Select,\r\n  Divider,\r\n  Switch,\r\n  FormLabel,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Dialog,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { MenuItem } from \"@material-ui/core\";\r\nimport { format } from \"date-fns\";\r\nimport { useHistory } from \"react-router\";\r\nimport { cepMask, cpfMask, currencyMask, onlyLetters, onlyNumbersMax5, phoneMask, onlyNumbers, cnpjMask } from \"../../utils/mask\";\r\nimport Loader from \"../../utils/loader\";\r\n\r\n\r\n\r\nfunction CadastroEmpresa() {\r\n  const { token } = useContext(StoreContext);\r\n  const { userLogged, setUserLogged } = useContext(StoreContext);\r\n  var editando = false;\r\n  var editarEmpresaUrl = \"\";\r\n  const editarEmpresaId = window.location.pathname.split(\"/\");\r\n  if (editarEmpresaId[2] != null) {\r\n    editarEmpresaUrl = `${url}/api/v1/empresas/${editarEmpresaId[2]}`;\r\n    editando = true;\r\n  }\r\n\r\n  const empresaResponse = useFetch(editarEmpresaUrl, \"get\", token);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const history = useHistory();\r\n\r\n  const person = { Nome: \"\", Telefone: \"\" };\r\n  const [disableFields, setDisable] = useState(false);\r\n\r\n  const initialValues = {\r\n    Id: 0,\r\n    TipoEmpresa: \"\",\r\n    UsarDados: false,\r\n    CNPJ_CPF: \"\",\r\n    RazaoSocial: \"\",\r\n    Telefone: \"\",\r\n    Ativo: true,\r\n    Endereco: {\r\n      Logradouro: \"\",\r\n      Numero: \"\",\r\n      Complemento: \"\",\r\n      Bairro: \"\",\r\n      Cidade: \"\",\r\n      Estado: \"\",\r\n      CEP: \"\",\r\n    },\r\n    Pessoa: {\r\n      Nome: \"\",\r\n      CPF: \"\",\r\n      DataNascimento: \"\",\r\n      Email: \"\",\r\n      Telefone: \"\",\r\n    },\r\n  };\r\n\r\n  const [values, setValues] = useState(initialValues);\r\n  const alertas = {\r\n    text: \"\",\r\n    title: \"\"\r\n  }\r\n\r\n  const [mensagem, setMensagem] = useState(alertas);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    if (validadorForm()) {\r\n      handleSubmit();\r\n    } else {\r\n      console.log(\"form inválido\");\r\n    }\r\n  };\r\n\r\n  const validadorForm = () => {\r\n    if (values.TipoEmpresa == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o tipo da empresa\" });\r\n      setOpen(true);\r\n    } else if (values.RazaoSocial == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar nome da empresa\" });\r\n      setOpen(true);\r\n    } else if (values.CNPJ_CPF == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar CNPJ ou CPF da empresa\" });\r\n      setOpen(true);\r\n    } else if (values.Telefone == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o nº de telefone da empresa\" });\r\n      setOpen(true);\r\n    } else if (values.Endereco.Logradouro == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o logradouro do endereço\" });\r\n      setOpen(true);\r\n    } else if (values.Endereco.Numero == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o número do endereço\" });\r\n      setOpen(true);\r\n    } else if (values.Endereco.Cidade == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar a cidade do endereço\" });\r\n      setOpen(true);\r\n    } else if (values.Endereco.Bairro == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o bairro do endereço\" });\r\n      setOpen(true);\r\n    } else if (values.Endereco.Estado == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o estado do endereço\" });\r\n      setOpen(true);\r\n    } else if (values.Endereco.CEP == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o CEP do endereço\" });\r\n      setOpen(true);\r\n    } else if (values.Pessoa.Nome == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o nome da pessoa\" });\r\n      setOpen(true);\r\n    } else if (values.Pessoa.CPF == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o CPF da pessoa\" });\r\n      setOpen(true);\r\n    } else if (values.Pessoa.DataNascimento == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar a data de nascimento da pessoa\" });\r\n      setOpen(true);\r\n    } else if (values.Pessoa.Email == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o e-mail da pessoa\" });\r\n      setOpen(true);\r\n    } else if (values.Pessoa.Telefone == \"\") {\r\n      setMensagem({ ...values, title: \"Alerta!\", text: \"Necessário informar o telefone da pessoa\" });\r\n      setOpen(true);\r\n    }\r\n    else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(\r\n    function () {\r\n      if (empresaResponse.data != null) {\r\n        setValues((prevState) => ({\r\n          Id: empresaResponse.data.id,\r\n          TipoEmpresa: empresaResponse.data.cnpJ_CPF.length < 12 ? \"1\" : \"2\",\r\n          CNPJ_CPF: empresaResponse.data.cnpJ_CPF,\r\n          RazaoSocial: empresaResponse.data.razaoSocial,\r\n          Telefone: empresaResponse.data.telefone,\r\n          Ativo: empresaResponse.data.ativo,\r\n          Endereco: {\r\n            Id: empresaResponse.data.endereco.id,\r\n            Logradouro: empresaResponse.data.endereco.logradouro,\r\n            Numero: empresaResponse.data.endereco.numero,\r\n            Complemento: empresaResponse.data.endereco.complemento,\r\n            Bairro: empresaResponse.data.endereco.bairro,\r\n            Cidade: empresaResponse.data.endereco.cidade,\r\n            Estado: empresaResponse.data.endereco.estado,\r\n            CEP: empresaResponse.data.endereco.cep,\r\n          },\r\n          Pessoa: {\r\n            Nome: empresaResponse.data.pessoas[0].nome,\r\n            CPF: empresaResponse.data.pessoas[0].cpf,\r\n            Email: empresaResponse.data.pessoas[0].email,\r\n            DataNascimento: format(\r\n              new Date(empresaResponse.data.pessoas[0].dataNascimento),\r\n              \"yyyy-MM-dd\"\r\n            ),\r\n            Telefone: empresaResponse.data.pessoas[0].telefone,\r\n          },\r\n        }));\r\n        setDisable(true);\r\n      }\r\n    },\r\n    [empresaResponse]\r\n  );\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: e.target.value });\r\n  };\r\n\r\n  const handlePessoa = (e) => {\r\n    const { name, value } = e.target;\r\n    const Endereco = { ...values.Endereco };\r\n    const Pessoa = { ...values.Pessoa };\r\n\r\n    if (name == \"Logradouro\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Logradouro\") Endereco[key] = value;\r\n      });\r\n    } else if (name == \"Numero\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Numero\") Endereco[key] = value;\r\n      });\r\n    } else if (name == \"Complemento\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Complemento\") Endereco[key] = value;\r\n      });\r\n    } else if (name == \"Bairro\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Bairro\") Endereco[key] = value;\r\n      });\r\n    } else if (name == \"Cidade\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Cidade\") Endereco[key] = value;\r\n      });\r\n    } else if (name == \"Estado\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"Estado\") Endereco[key] = value;\r\n      });\r\n    } else if (name == \"CEP\") {\r\n      Object.keys(Endereco).forEach((key) => {\r\n        if (key === \"CEP\") Endereco[key] = value;\r\n      });\r\n    } else if (name == \"CPF\") {\r\n      Object.keys(Pessoa).forEach((key) => {\r\n        if (key === \"CPF\") Pessoa[key] = value;\r\n      });\r\n    } else if (name == \"Nome\") {\r\n      Object.keys(Pessoa).forEach((key) => {\r\n        if (key === \"Nome\") Pessoa[key] = value;\r\n      });\r\n    } else if (name == \"Email\") {\r\n      Object.keys(Pessoa).forEach((key) => {\r\n        if (key === \"Email\") Pessoa[key] = value;\r\n      });\r\n    } else if (name == \"Telefone\") {\r\n      Object.keys(Pessoa).forEach((key) => {\r\n        if (key === \"Telefone\") Pessoa[key] = value;\r\n      });\r\n    } else if (name == \"DataNascimento\") {\r\n      Object.keys(Pessoa).forEach((key) => {\r\n        if (key === \"DataNascimento\") Pessoa[key] = value;\r\n      });\r\n    }\r\n    setValues({ ...values, Endereco, Pessoa });\r\n  };\r\n\r\n  const funcUsarDadosEmpresa = (e) => {\r\n    const { name, checked } = e.target;\r\n    const newPessoa = values;\r\n\r\n    newPessoa.Pessoa = {\r\n      Nome: values.RazaoSocial,\r\n      CPF: values.CNPJ_CPF,\r\n      Telefone: values.Telefone,\r\n      DataNascimento: \"\",\r\n      Email: \"\",\r\n    };\r\n    setValues({ ...values, Pessoa: newPessoa });\r\n    setValues({ ...values, [name]: e.target.checked });\r\n  };\r\n\r\n  const handleCheckChange = (e) => {\r\n    const { name, checked } = e.target;\r\n    setValues({ ...values, [name]: e.target.checked });\r\n  };\r\n\r\n  function handleSubmit(e) {\r\n    if (values.Id != 0) {\r\n      const valuesToSubmit = values;\r\n      setValues({ ...values, valuesToSubmit });\r\n    }\r\n    document.getElementById(\"div-loading\").style.display = \"block\";\r\n\r\n    const response = fetch(`${url}/api/v1/empresas/`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: 'Bearer ' + token,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(values),\r\n    })\r\n\r\n      .then(async (response) => {\r\n\r\n        if (response.ok) {\r\n          let data = await response.json();\r\n          setMensagem({ ...values, title: \"Sucesso!\", text: editando ? \"Empresa atualizada\" : \"Empresa cadastrada\" })\r\n          setOpen(true);\r\n          setUserLogged({ ...userLogged, empresa: data });\r\n        } else {\r\n          let data = await response.json();\r\n          setMensagem({ ...values, title: \"Erro!\", text: data })\r\n          setOpen(true);\r\n        }\r\n\r\n        \r\n\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n      \r\n      document.getElementById(\"div-loading\").style.display = \"none\";\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          <div className={classes.titulo}>\r\n            <h1>Cadastro de Empresa</h1>\r\n          </div>\r\n          <form>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"TipoEmpresa\"\r\n                  name=\"TipoEmpresa\"\r\n                  label=\"Tipo\"\r\n                  select\r\n                  fullWidth\r\n                  value={values.TipoEmpresa}\r\n                  onChange={handleChange}\r\n                >\r\n                  <MenuItem value=\"1\">Física</MenuItem>\r\n                  <MenuItem value=\"2\">Jurídica</MenuItem>\r\n                </TextField>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={2}>\r\n                <FormLabel>Ativa?</FormLabel>\r\n\r\n                <Switch\r\n                  color=\"primary\"\r\n                  name=\"Ativo\"\r\n                  value={values.Ativo}\r\n                  checked={values.Ativo}\r\n                  onChange={handleCheckChange}\r\n                  inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n\r\n\r\n            </Grid>\r\n\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  id=\"RazaoSocial\"\r\n                  name=\"RazaoSocial\"\r\n                  label=\"Nome\"\r\n                  fullWidth\r\n                  onChange={handleChange}\r\n                  value={values.RazaoSocial}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  id=\"CNPJ_CPF\"\r\n                  name=\"CNPJ_CPF\"\r\n                  label={\r\n                    values.TipoEmpresa == \"1\"\r\n                      ? \"CPF\"\r\n                      : values.TipoEmpresa == \"2\"\r\n                        ? \"CNPJ\"\r\n                        : \"CNPJ OU CPF\"\r\n                  }\r\n                  fullWidth\r\n\r\n                  onChange={(e) => { values.TipoEmpresa == \"1\" ? handleChange(cpfMask(e)) : handleChange(cnpjMask(e)) }}\r\n                  value={values.CNPJ_CPF}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  id=\"Telefone\"\r\n                  name=\"Telefone\"\r\n                  label=\"Telefone\"\r\n                  fullWidth\r\n                  onChange={(e) => { handleChange(phoneMask(e)) }}\r\n                  value={values.Telefone}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  id=\"Endereco.Logradouro\"\r\n                  name=\"Logradouro\"\r\n                  onChange={handlePessoa}\r\n                  value={values.Endereco.Logradouro}\r\n                  label=\"Logradouro\"\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={1}>\r\n                <TextField\r\n                  id=\"Endereco.Numero\"\r\n                  name=\"Numero\"\r\n                  label=\"Nº\"\r\n                  onChange={(e) => { handlePessoa(onlyNumbersMax5(e)) }}\r\n                  value={values.Endereco.Numero}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={3}>\r\n                <TextField\r\n                  id=\"Endereco.Complemento\"\r\n                  name=\"Complemento\"\r\n                  label=\"Complemento\"\r\n                  onChange={handlePessoa}\r\n                  value={values.Endereco.Complemento}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"Endereco.Cidade\"\r\n                  name=\"Cidade\"\r\n                  label=\"Cidade\"\r\n                  onChange={handlePessoa}\r\n                  value={values.Endereco.Cidade}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"Endereco.Bairro\"\r\n                  name=\"Bairro\"\r\n                  onChange={handlePessoa}\r\n                  value={values.Endereco.Bairro}\r\n                  label=\"Bairro\"\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"Endereco.Estado\"\r\n                  name=\"Estado\"\r\n                  label=\"Estado\"\r\n                  onChange={handlePessoa}\r\n                  value={values.Endereco.Estado}\r\n                  fullWidth\r\n                  select\r\n                >\r\n                  <MenuItem value=\"AC\">Acre</MenuItem>\r\n                  <MenuItem value=\"AL\">Alagoas</MenuItem>\r\n                  <MenuItem value=\"AP\">Amapá</MenuItem>\r\n                  <MenuItem value=\"AM\">Amazonas</MenuItem>\r\n                  <MenuItem value=\"BA\">Bahia</MenuItem>\r\n                  <MenuItem value=\"CE\">Ceará</MenuItem>\r\n                  <MenuItem value=\"DF\">Distrito Federal</MenuItem>\r\n                  <MenuItem value=\"ES\">Espírito Santo</MenuItem>\r\n                  <MenuItem value=\"GO\">Goiás</MenuItem>\r\n                  <MenuItem value=\"MA\">Maranhão</MenuItem>\r\n                  <MenuItem value=\"MT\">Mato Grosso</MenuItem>\r\n                  <MenuItem value=\"MS\">Mato Grosso do Sul</MenuItem>\r\n                  <MenuItem value=\"MG\">Minas Gerais</MenuItem>\r\n                  <MenuItem value=\"PA\">Pará</MenuItem>\r\n                  <MenuItem value=\"PB\">Paraíba</MenuItem>\r\n                  <MenuItem value=\"PR\">Paraná</MenuItem>\r\n                  <MenuItem value=\"PE\">Pernambuco</MenuItem>\r\n                  <MenuItem value=\"PI\">Piauí</MenuItem>\r\n                  <MenuItem value=\"RJ\">Rio de Janeiro</MenuItem>\r\n                  <MenuItem value=\"RN\">Rio Grande do Norte</MenuItem>\r\n                  <MenuItem value=\"RS\">Rio Grande do Sul</MenuItem>\r\n                  <MenuItem value=\"RO\">Rondônia</MenuItem>\r\n                  <MenuItem value=\"RR\">Roraima</MenuItem>\r\n                  <MenuItem value=\"SC\">Santa Catarina</MenuItem>\r\n                  <MenuItem value=\"SP\">São Paulo</MenuItem>\r\n                  <MenuItem value=\"SE\">Sergipe</MenuItem>\r\n                  <MenuItem value=\"TO\">Tocantins</MenuItem>\r\n                </TextField>\r\n              </Grid>\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"Endereco.CEP\"\r\n                  name=\"CEP\"\r\n                  label=\"CEP\"\r\n                  onChange={(e) => { handlePessoa(cepMask(e)) }}\r\n                  value={values.Endereco.CEP}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <br></br>\r\n                <div className={classes.subtitulo}>\r\n                  <h4>Dados Usuário</h4>\r\n                  <Divider />\r\n                </div>\r\n                <Grid item xs={12} sm={4}>\r\n                  <FormLabel>Usar dados da empresa?</FormLabel>\r\n\r\n                  <Switch\r\n                    color=\"primary\"\r\n                    name=\"UsarDados\"\r\n                    value={values.UsarDados}\r\n                    checked={values.UsarDados}\r\n                    disabled={disableFields}\r\n                    onChange={funcUsarDadosEmpresa}\r\n                    inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  id=\"Pessoa.Nome\"\r\n                  name=\"Nome\"\r\n                  label=\"Nome\"\r\n                  fullWidth\r\n                  disabled={disableFields}\r\n                  onChange={(e) => { handlePessoa(onlyLetters(e)) }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  value={\r\n                    values.UsarDados ? values.RazaoSocial : values.Pessoa.Nome\r\n                  }\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  id=\"Pessoa.CPF\"\r\n                  name=\"CPF\"\r\n                  label=\"CPF\"\r\n                  fullWidth\r\n                  disabled={disableFields}\r\n                  onChange={(e) => { handlePessoa(cpfMask(e)) }}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  value={\r\n                    values.UsarDados ? values.CNPJ_CPF : values.Pessoa.CPF\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={3}>\r\n                <TextField\r\n                  id=\"Pessoa.DataNascimento\"\r\n                  name=\"DataNascimento\"\r\n                  label=\"Data Nascimento\"\r\n                  type=\"date\"\r\n                  onChange={handlePessoa}\r\n                  disabled={disableFields}\r\n                  value={values.Pessoa.DataNascimento}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={4}>\r\n                <TextField\r\n                  id=\"Pessoa.Email\"\r\n                  name=\"Email\"\r\n                  label=\"E-mail\"\r\n                  disabled={disableFields}\r\n                  fullWidth\r\n                  onChange={handlePessoa}\r\n                  value={values.Pessoa.Email}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={2}>\r\n                <TextField\r\n                  id=\"Pessoa.Telefone\"\r\n                  name=\"Telefone\"\r\n                  label=\"Telefone\"\r\n                  disabled={disableFields}\r\n                  fullWidth\r\n                  onChange={(e) => { handlePessoa(phoneMask(e)) }}\r\n                  value={\r\n                    values.UsarDados ? values.Telefone : values.Pessoa.Telefone\r\n                  }\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <div className={classes.buttons}>\r\n              {editando\r\n                ? false\r\n                : <Button\r\n                  variant=\"contained\"\r\n                  color=\"inherit\"\r\n                  className={classes.button}\r\n                >\r\n                  Limpar\r\n                </Button>}\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleClickOpen}\r\n                className={classes.button}\r\n              >\r\n                {editando ? \"Atualizar\" : \"Cadastrar\"}\r\n              </Button>\r\n\r\n            </div>\r\n          </form>\r\n          <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-title\">{mensagem.title}</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-description\">\r\n                {mensagem.text}\r\n              </DialogContentText>\r\n            </DialogContent>\r\n\r\n            {(mensagem.title == \"Sucesso!\") ?\r\n              <Button onClick={() => { handleClose(); history.push(\"/empresas\"); }}>Ok</Button>\r\n              : <Button onClick={handleClose}>Ok</Button>}\r\n\r\n          </Dialog>\r\n        </Paper>\r\n      </main>\r\n      <Loader />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default CadastroEmpresa;\r\n","C:\\Git\\MeuAlunoReact\\src\\views\\Home\\Home.jsx",[],"C:\\Git\\MeuAlunoReact\\src\\views\\Contratos\\CadastroContrato.jsx",["380","381","382","383","384","385","386","387","388"],"import { Grid, Paper, TextareaAutosize, FormControlLabel, Checkbox, Button,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogContentText,\r\n    Dialog } from \"@material-ui/core\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { url } from \"../../variaveis\";\r\n\r\n\r\nfunction CadastroContrato() {\r\n\r\n    const classes = useStyles();\r\n    const { token, userLogged } = useContext(StoreContext);\r\n    const retornoContrato = useFetch(`${url}/api/v1/contratos/empresa/${userLogged.empresaId}`, \"get\", token)\r\n    const [clausulas, setClausulas] = useState([])\r\n    const [contrato, setContrato] = useState();\r\n    const alertas = {\r\n        text: \"\",\r\n        title: \"\"\r\n      }\r\n    \r\n    const [mensagem, setMensagem] = useState(alertas);\r\n    const [open, setOpen] = useState(false);\r\n    const history = useHistory();\r\n    \r\n    const checkAdmin = () => {\r\n        if(userLogged.tipoUsuario == 1){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    };\r\n\r\n    useEffect(\r\n        function () {\r\n            if (retornoContrato.data != null) {\r\n                const contratoValues = {\r\n                    ContratoId: retornoContrato.data.contratoId,\r\n                    EmpresaId: userLogged.empresaId\r\n                }\r\n                setContrato(contratoValues);\r\n                var clausulasExistentes = []                \r\n                retornoContrato.data.clausulas.map((clausula => (\r\n                    clausulasExistentes.push({ \r\n                        Id: clausula.id,\r\n                        Nome: clausula.nome,\r\n                        Descricao: clausula.descricao,\r\n                        ContratoId: clausula.ContratoId,\r\n                        Ativa: clausula.ativa\r\n                    })\r\n                )))\r\n                setClausulas(clausulasExistentes);\r\n            }\r\n        }, [retornoContrato]\r\n    );\r\n\r\n    useEffect(\r\n        function() {\r\nconsole.log(\"clausula\", clausulas);\r\n        },[clausulas]\r\n    )\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n\r\n      const handleClausula = (e) => {\r\n        const { name, value, checked } = e.target;\r\n        var clausulasExistentes = [...clausulas];  \r\n        var clausulaIndex = clausulas.findIndex(i => i.Id == name);\r\n        if (checked === false) {\r\n            clausulasExistentes[clausulaIndex].Ativa = false;\r\n            setClausulas(clausulasExistentes);\r\n        }\r\n        else if (checked === true) {\r\n            clausulasExistentes[clausulaIndex].Ativa = true;\r\n            setClausulas(clausulasExistentes);\r\n        }\r\n    };  \r\n\r\n    function checkChange(id) {\r\n        var checkClausulas = clausulas;\r\n        var clausulasId = []\r\n        checkClausulas.map((clausula, i) => (\r\n            clausula.Ativa == true ? clausulasId.push(clausula.Id) : false                        \r\n        ))\r\n        if (clausulasId.find(e => e == id)) {\r\n            return true\r\n        } else\r\n            return false\r\n    }\r\n   \r\n\r\n    function addClausula(){        \r\n        var clausulasExistentes = [...clausulas];                \r\n        clausulasExistentes.push({ \r\n                        Id: 1,\r\n                        Nome: \"Nova cláusula\",\r\n                        Descricao: \"descrição\",\r\n                        ContratoId: 0,\r\n                        Ativa: false\r\n                    });                                   \r\n        setClausulas(clausulasExistentes);   \r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        var clausulasExistentes = clausulas;\r\n        var clausulaIndex = clausulas.findIndex(i => i.Id == name);\r\n        clausulasExistentes[clausulaIndex].descricao = value;\r\n        setClausulas(clausulasExistentes);\r\n      };\r\n\r\n    function handleSubmit(e) {  \r\n        var ContratoId = contrato.ContratoId;\r\n        var EmpresaId = contrato.EmpresaId;\r\n        var request = {            \r\n            clausulas,\r\n            ContratoId,\r\n            EmpresaId\r\n        }\r\n\r\n        const response = fetch(`${url}/api/v1/contratos/`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                Authorization: 'Bearer ' + token,\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(request),\r\n        })\r\n        .then((response) => {     \r\n              setMensagem({ title: \"Sucesso!\", text: \"Contrato atualizado.\" })\r\n              setOpen(true);         \r\n          })\r\n         .catch((response) => {\r\n             setMensagem({ title: \"Erro!\", text: \"Erro ao atualizar cadastro.\" })\r\n             setOpen(true);\r\n          });\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <main className={classes.layout}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={8}>\r\n                        <div className={classes.stepper}>\r\n                            <h2>Selecione quais cláusulas deseja adicionar no contrato:</h2>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                <form>\r\n                    <Grid container spacing={3}>                       \r\n                   {clausulas.map((clausula,i) => (\r\n                       \r\n                       <>\r\n                      <Grid item xs={12} sm={2}>\r\n                      <FormControlLabel\r\n                          control={\r\n                              <Checkbox\r\n                                  key={clausula.Id}\r\n                                  name={clausula.Id}\r\n                                  value={clausula.Id}\r\n                                  onChange={handleClausula}\r\n                                  checked={checkChange(clausula.Id)}\r\n                              />\r\n                          }\r\n                      />\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={10}>\r\n                                            <TextareaAutosize\r\n                                                key={clausula.Id}\r\n                                                minRows={4}\r\n                                                aria-label=\"maximum height\"\r\n                                                placeholder=\"Maximum 4 rows\"\r\n                                                defaultValue={clausula.Nome + \" \" + clausula.Descricao}\r\n                                                disabled={checkAdmin() === true ? false : true}\r\n                                                name={clausula.Id}\r\n                                                style={{ width: 700 }}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                        </Grid>\r\n                      </>\r\n                  \r\n                   ))}\r\n\r\n                    </Grid>\r\n                    <div className={classes.button}>\r\n\r\n                    {checkAdmin() === true ? \r\n                        <Button\r\n                        variant=\"contained\"\r\n                        color=\"warning\"                            \r\n                        onClick={addClausula}\r\n                        className={classes.button}\r\n                    >\r\n                        Adicionar\r\n                    </Button>\r\n\r\n                        : false}\r\n\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"                            \r\n                            onClick={handleSubmit}\r\n                            className={classes.button}\r\n                        >\r\n                            Salvar\r\n                        </Button>\r\n                        \r\n                        \r\n                    </div>\r\n                </form>\r\n\r\n                <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{mensagem.title}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {mensagem.text}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          {<Button onClick={() => { handleClose(); history.push(\"/contratos\"); }}>Ok</Button>}\r\n        </Dialog>\r\n            </main>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CadastroContrato;","C:\\Git\\MeuAlunoReact\\src\\views\\Contratos\\Contratos.jsx",["389","390","391","392","393","394","395","396"],"import React, { useContext } from \"react\";\r\nimport StoreContext from \"../../contexts/StoreContext\";\r\nimport { useFetch } from \"../../hooks/useFetch\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Button } from \"@material-ui/core\";\r\nimport useStyles from \"../Styles/useStyles\";\r\nimport { url } from \"../../../src/variaveis\";\r\nimport CadastroContrato from \"../Contratos/CadastroContrato\";\r\n\r\nfunction Contratos() {\r\n  const { token, userLogged } = useContext(StoreContext);\r\n\r\n  const history = useHistory();\r\n\r\n  const classes = useStyles();\r\n\r\n  function novaMateria(){\r\n    history.push(\"/cadastroMateria\")\r\n  }\r\n\r\n  function editarMateria(id){\r\n    history.push(`/cadastroMateria/${id}`)\r\n  }\r\n\r\n  return (         \r\n        <div className=\"lista-materias\">\r\n          <h1>Contrato Modelo</h1>         \r\n          <CadastroContrato />\r\n          \r\n        </div>     \r\n    \r\n  );\r\n}\r\n\r\nexport default Contratos;\r\n","C:\\Git\\MeuAlunoReact\\src\\utils\\storage.js",[],"C:\\Git\\MeuAlunoReact\\src\\views\\Styles\\useStyles.js",[],"C:\\Git\\MeuAlunoReact\\src\\hooks\\useFetch.js",["397","398","399","400","401"],"import { useEffect, useState, useContext } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nexport const useFetch = (url,method, token, body) => {\r\n    const [response,setResponse] = useState({\r\n        data: null,\r\n        loading: true\r\n    })\r\n\r\n    const history = useHistory();\r\n\r\n    function handleErrors(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    useEffect(async function(){\r\n        await fetch(url, { \r\n            method: method, \r\n            headers: new Headers\r\n            ({\r\n                'Authorization': 'Bearer ' + token            \r\n            }),\r\n            body: body       \r\n    })\r\n        \r\n        .then(resp => resp.json())\r\n        .then(json => setResponse({\r\n                data: json,\r\n                loading: false\r\n            }));\r\n    },[url,method])\r\n    return response\r\n}","C:\\Git\\MeuAlunoReact\\src\\utils\\mask.jsx",["402"],"import React from \"react\";\r\n\r\nexport const currencyMask = (e) => {\r\n    let value;\r\n    if(e.target != null)\r\n    value = e.target.value;\r\n    else \r\n    value = e;\r\n    value = value.replace(/\\D/g, \"\");\r\n    value = value.replace(/(\\d)(\\d{2})$/, \"$1,$2\");\r\n    //quando tem . o backend nao está aceitando converter para decimal\r\n    value = value.replace(/(?=(\\d{3})+(\\D))\\B/g, \".\")\r\n\r\n    if(e.target != null){\r\n        e.target.value = value;\r\n        return e;\r\n    }   \r\n    else {\r\n        return value;\r\n    }  \r\n}\r\n\r\nexport const currencyMaskList = (e) => {\r\n    let value = e;    \r\n    value = value.replace('.', \",\");\r\n    value = value.replace(/(?=(\\d{3})+(\\D))\\B/g, \".\") \r\n    e = value;\r\n    return e;\r\n}\r\n\r\nexport const onlyLetters = (e) => {\r\n    e.target.maxLength = 100;\r\n    let value = e.target.value;\r\n    value = value.replace(/[^A-Za-záàâãéèêíïóôõöúçñÁÀÂÃÉÈÍÏÓÔÕÖÚÇÑ'\\s]+$/g, '');       \r\n    e.target.value = value;\r\n    return e;\r\n}\r\n\r\nexport const cpfMask = (e) => {\r\n    e.target.maxLength = 14; \r\n    let value = e.target.value;     \r\n    value = value.replace(/\\D/g, \"\");\r\n    value = value.replace(/(\\d)(\\d{2})$/, \"$1-$2\");\r\n    value = value.replace(/(?=(\\d{3})+(\\D))\\B/g, \".\")\r\n    e.target.value = value;\r\n    return e;\r\n}\r\n\r\nexport const cnpjMask = (e) => {\r\n    e.target.maxLength = 18; \r\n    let value = e.target.value;     \r\n    value = value.replace(/\\D/g, \"\");\r\n    value = value.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, \"$1.$2.$3/$4-$5\");\r\n    e.target.value = value;\r\n    return e;\r\n}\r\n\r\nexport const phoneMask = (e) => {\r\n    let value = e.target.value; \r\n    value = value.replace(/\\D/g,\"\");\r\n    value = value.replace(/^0/,\"\");\r\n    if (value.length > 10) {\r\n        // 11+ digits. Format as 5+4.\r\n        value = value.replace(/^(\\d\\d)(\\d{5})(\\d{4}).*/,\"($1) $2-$3\");\r\n    }\r\n    else if (value.length > 5) {\r\n        // 6..10 digits. Format as 4+4\r\n        value = value.replace(/^(\\d\\d)(\\d{4})(\\d{0,4}).*/,\"($1) $2-$3\");\r\n    }\r\n    else if (value.length > 2) {\r\n        // 3..5 digits. Add (0XX..)\r\n        value = value.replace(/^(\\d\\d)(\\d{0,5})/,\"($1) $2\");\r\n    }\r\n    else {\r\n        // 0..2 digits. Just add (0XX\r\n        value = value.replace(/^(\\d*)/, \"($1\");\r\n    }\r\n    e.target.value = value;\r\n    return e;               \r\n    \r\n}\r\n\r\nexport const onlyNumbersMax5 = (e) => {\r\n    e.target.maxLength = 5;\r\n    let value = e.target.value;\r\n    value = value.replace(/\\D/g, \"\"); \r\n    e.target.value = value;\r\n    return e;\r\n}\r\n\r\nexport const onlyNumbersMax2 = (e) => {\r\n    e.target.maxLength = 2;\r\n    let value = e.target.value;\r\n    value = value.replace(/\\D/g, \"\"); \r\n    e.target.value = value;\r\n    return e;\r\n}\r\n\r\nexport const dayNumber = (e) => {\r\n    e.target.maxLength = 2;\r\n    let value = e.target.value;\r\n    value = value.replace(/\\D/g, \"\"); \r\n    if(value > 31)\r\n        value = 31;\r\n    e.target.value = value;\r\n    return e;\r\n}\r\n\r\nexport const onlyNumbers = (e) => {    \r\n    let value = e.target.value;\r\n    value = value.replace(/\\D/g, \"\"); \r\n    e.target.value = value;\r\n    return e;\r\n}\r\n\r\nexport const horarioMask = (e) => {\r\n    e.target.maxLength = 5;\r\n    let value = e.target.value;\r\n    value = value.replace(/\\D/g, \"\"); \r\n    value = value.replace(/(\\d)(\\d{2})$/, \"$1:$2\");\r\n    e.target.value = value;\r\n    return e;\r\n}\r\n\r\nexport const cepMask = (e) => {\r\n    e.target.maxLength = 9; \r\n    let value = e.target.value;     \r\n    value = value.replace(/\\D/g, \"\");\r\n    value = value.replace(/(\\d)(\\d{3})$/, \"$1-$2\");    \r\n    e.target.value = value;\r\n    return e;\r\n}\r\n\r\nexport const getCurrentDate = (separator) => {\r\n    let newDate = new Date()\r\n    let date = newDate.getDate();\r\n    let month = newDate.getMonth() + 1;\r\n    let year = newDate.getFullYear();    \r\n    return `${year}${separator}${month<10?`0${month}`:`${month}`}${separator}${date}`\r\n}\r\n\r\nexport const dateFormat = (e) => {\r\n    var date = e.target.value.split(\"-\");\r\n    var year = date[0];\r\n    var month = date[1];\r\n    var day = date[2];    \r\n    year = year.substring(0,4);\r\n    e.target.value = `${year}-${month}-${day}`;  \r\n    return e;\r\n}\r\n\r\n","C:\\Git\\MeuAlunoReact\\src\\components\\menu\\MenuItem.jsx",["403","404","405","406"],"import React from 'react'\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport * as IoIcons from 'react-icons/io';\r\n\r\nexport const MenuItemAdmin = [\r\n    {\r\n        title: 'Home',\r\n        path: '/',\r\n        cName: 'rf-icon-home'\r\n    },\r\n    {\r\n        title: 'Empresas',\r\n        path: '/empresas',\r\n        cName: 'rf-icon-office'\r\n    },\r\n    {\r\n        title: 'Aulas',\r\n        path: '/aulas',\r\n        cName: 'rf-icon-book'\r\n    },\r\n    {\r\n        title: 'Serviços',\r\n        path: '/servicos',\r\n        cName: 'rf-icon-home'\r\n    },\r\n    {\r\n        title: 'Matérias',\r\n        path: '/materias',\r\n        cName: 'rf-icon-books'\r\n    },\r\n    {\r\n        title: 'Alunos',\r\n        path: '/alunos',\r\n        cName: 'rf-icon-user'\r\n    },\r\n    {\r\n        title: 'Financeiro',\r\n        path: '/financeiros',\r\n        cName: 'rf-icon-coin-dollar'\r\n    },\r\n    {\r\n        title: 'Usuários',\r\n        path: '/usuarios',\r\n        cName: 'rf-icon-users'\r\n    },\r\n    {\r\n        title: 'Contratos',\r\n        path: '/contratos',\r\n        cName: 'rf-icon-profile'\r\n    }  \r\n]\r\n\r\nexport const MenuItemCliente = [\r\n    {\r\n        title: 'Home',\r\n        path: '/',\r\n        cName: 'rf-icon-home'\r\n    },  \r\n    {\r\n        title: 'Matérias',\r\n        path: '/materias',\r\n        cName: 'rf-icon-books'\r\n    },  \r\n    {\r\n        title: 'Aulas',\r\n        path: '/aulas',\r\n        cName: 'rf-icon-book'\r\n    },\r\n    {\r\n        title: 'Serviços',\r\n        path: '/servicos',\r\n        cName: 'rf-icon-home'\r\n    },    \r\n    {\r\n        title: 'Alunos',\r\n        path: '/alunos',\r\n        cName: 'rf-icon-user'\r\n    },\r\n    {\r\n        title: 'Financeiro',\r\n        path: '/financeiros',\r\n        cName: 'rf-icon-coin-dollar'\r\n    }     \r\n]","C:\\Git\\MeuAlunoReact\\src\\components\\user\\UserThumb.jsx",["407","408","409","410","411"],"import React, { useState, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport StoreContext from '../../contexts/StoreContext';\r\n\r\nconst UserThumb = () => {\r\n    const { token, setToken } = useContext(StoreContext);\r\n    const { userLogged, setUserLogged } = useContext(StoreContext);\r\n\r\n    return (\r\n\r\n        <div className=\"rf-user__thumb\">\r\n            <div className=\"rf-icon-user\"></div>\r\n            <div className=\"--frow-center --fgap-10\">\r\n                <strong>{userLogged.pessoaNome}</strong>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserThumb;",{"ruleId":"412","replacedBy":"413"},{"ruleId":"414","replacedBy":"415"},{"ruleId":"416","severity":1,"message":"417","line":39,"column":26,"nodeType":"418","messageId":"419","endLine":39,"endColumn":28},{"ruleId":"420","severity":1,"message":"421","line":53,"column":19,"nodeType":"422","messageId":"423","endLine":53,"endColumn":27},{"ruleId":"424","severity":1,"message":"425","line":82,"column":13,"nodeType":"426","endLine":82,"endColumn":79},{"ruleId":"416","severity":1,"message":"427","line":127,"column":34,"nodeType":"418","messageId":"419","endLine":127,"endColumn":36},{"ruleId":"416","severity":1,"message":"427","line":69,"column":27,"nodeType":"418","messageId":"419","endLine":69,"endColumn":29},{"ruleId":"420","severity":1,"message":"421","line":84,"column":11,"nodeType":"422","messageId":"423","endLine":84,"endColumn":19},{"ruleId":"424","severity":1,"message":"425","line":111,"column":9,"nodeType":"426","endLine":111,"endColumn":74},{"ruleId":"428","severity":1,"message":"429","line":143,"column":13,"nodeType":"426","endLine":143,"endColumn":73},{"ruleId":"416","severity":1,"message":"427","line":164,"column":26,"nodeType":"418","messageId":"419","endLine":164,"endColumn":28},{"ruleId":"416","severity":1,"message":"427","line":177,"column":26,"nodeType":"418","messageId":"419","endLine":177,"endColumn":28},{"ruleId":"416","severity":1,"message":"427","line":36,"column":26,"nodeType":"418","messageId":"419","endLine":36,"endColumn":28},{"ruleId":"420","severity":1,"message":"421","line":45,"column":19,"nodeType":"422","messageId":"423","endLine":45,"endColumn":27},{"ruleId":"416","severity":1,"message":"427","line":104,"column":34,"nodeType":"418","messageId":"419","endLine":104,"endColumn":36},{"ruleId":"420","severity":1,"message":"430","line":2,"column":10,"nodeType":"422","messageId":"423","endLine":2,"endColumn":13},{"ruleId":"420","severity":1,"message":"431","line":3,"column":3,"nodeType":"422","messageId":"423","endLine":3,"endColumn":8},{"ruleId":"420","severity":1,"message":"432","line":4,"column":3,"nodeType":"422","messageId":"423","endLine":4,"endColumn":12},{"ruleId":"420","severity":1,"message":"433","line":5,"column":3,"nodeType":"422","messageId":"423","endLine":5,"endColumn":9},{"ruleId":"420","severity":1,"message":"430","line":6,"column":3,"nodeType":"422","messageId":"423","endLine":6,"endColumn":6},{"ruleId":"420","severity":1,"message":"434","line":7,"column":3,"nodeType":"422","messageId":"423","endLine":7,"endColumn":10},{"ruleId":"420","severity":1,"message":"435","line":8,"column":3,"nodeType":"422","messageId":"423","endLine":8,"endColumn":13},{"ruleId":"420","severity":1,"message":"436","line":11,"column":3,"nodeType":"422","messageId":"423","endLine":11,"endColumn":13},{"ruleId":"420","severity":1,"message":"437","line":17,"column":10,"nodeType":"422","messageId":"423","endLine":17,"endColumn":19},{"ruleId":"420","severity":1,"message":"438","line":23,"column":9,"nodeType":"422","messageId":"423","endLine":23,"endColumn":16},{"ruleId":"420","severity":1,"message":"439","line":38,"column":15,"nodeType":"422","messageId":"423","endLine":38,"endColumn":19},{"ruleId":"416","severity":1,"message":"427","line":40,"column":16,"nodeType":"418","messageId":"419","endLine":40,"endColumn":18},{"ruleId":"440","severity":1,"message":"441","line":66,"column":9,"nodeType":"426","endLine":66,"endColumn":111},{"ruleId":"428","severity":1,"message":"442","line":66,"column":9,"nodeType":"426","endLine":66,"endColumn":111},{"ruleId":"420","severity":1,"message":"437","line":1,"column":27,"nodeType":"422","messageId":"423","endLine":1,"endColumn":36},{"ruleId":"420","severity":1,"message":"443","line":2,"column":18,"nodeType":"422","messageId":"423","endLine":2,"endColumn":22},{"ruleId":"420","severity":1,"message":"444","line":2,"column":24,"nodeType":"422","messageId":"423","endLine":2,"endColumn":32},{"ruleId":"420","severity":1,"message":"431","line":2,"column":34,"nodeType":"422","messageId":"423","endLine":2,"endColumn":39},{"ruleId":"420","severity":1,"message":"432","line":2,"column":41,"nodeType":"422","messageId":"423","endLine":2,"endColumn":50},{"ruleId":"420","severity":1,"message":"445","line":7,"column":10,"nodeType":"422","messageId":"423","endLine":7,"endColumn":16},{"ruleId":"420","severity":1,"message":"438","line":14,"column":9,"nodeType":"422","messageId":"423","endLine":14,"endColumn":16},{"ruleId":"420","severity":1,"message":"446","line":28,"column":10,"nodeType":"422","messageId":"423","endLine":28,"endColumn":16},{"ruleId":"420","severity":1,"message":"447","line":28,"column":18,"nodeType":"422","messageId":"423","endLine":28,"endColumn":27},{"ruleId":"420","severity":1,"message":"448","line":77,"column":22,"nodeType":"422","messageId":"423","endLine":77,"endColumn":27},{"ruleId":"416","severity":1,"message":"427","line":96,"column":27,"nodeType":"418","messageId":"419","endLine":96,"endColumn":29},{"ruleId":"416","severity":1,"message":"427","line":99,"column":33,"nodeType":"418","messageId":"419","endLine":99,"endColumn":35},{"ruleId":"416","severity":1,"message":"427","line":102,"column":32,"nodeType":"418","messageId":"419","endLine":102,"endColumn":34},{"ruleId":"416","severity":1,"message":"427","line":105,"column":29,"nodeType":"418","messageId":"419","endLine":105,"endColumn":31},{"ruleId":"420","severity":1,"message":"421","line":121,"column":11,"nodeType":"422","messageId":"423","endLine":121,"endColumn":19},{"ruleId":"420","severity":1,"message":"449","line":134,"column":13,"nodeType":"422","messageId":"423","endLine":134,"endColumn":17},{"ruleId":"416","severity":1,"message":"427","line":270,"column":27,"nodeType":"418","messageId":"419","endLine":270,"endColumn":29},{"ruleId":"416","severity":1,"message":"427","line":270,"column":80,"nodeType":"418","messageId":"419","endLine":270,"endColumn":82},{"ruleId":"420","severity":1,"message":"450","line":22,"column":3,"nodeType":"422","messageId":"423","endLine":22,"endColumn":19},{"ruleId":"420","severity":1,"message":"448","line":201,"column":19,"nodeType":"422","messageId":"423","endLine":201,"endColumn":24},{"ruleId":"420","severity":1,"message":"439","line":243,"column":13,"nodeType":"422","messageId":"423","endLine":243,"endColumn":17},{"ruleId":"420","severity":1,"message":"451","line":247,"column":11,"nodeType":"422","messageId":"423","endLine":247,"endColumn":16},{"ruleId":"420","severity":1,"message":"452","line":249,"column":9,"nodeType":"422","messageId":"423","endLine":249,"endColumn":18},{"ruleId":"416","severity":1,"message":"417","line":254,"column":63,"nodeType":"418","messageId":"419","endLine":254,"endColumn":65},{"ruleId":"416","severity":1,"message":"427","line":272,"column":28,"nodeType":"418","messageId":"419","endLine":272,"endColumn":30},{"ruleId":"420","severity":1,"message":"421","line":281,"column":11,"nodeType":"422","messageId":"423","endLine":281,"endColumn":19},{"ruleId":"416","severity":1,"message":"427","line":650,"column":27,"nodeType":"418","messageId":"419","endLine":650,"endColumn":29},{"ruleId":"420","severity":1,"message":"453","line":8,"column":10,"nodeType":"422","messageId":"423","endLine":8,"endColumn":21},{"ruleId":"420","severity":1,"message":"454","line":8,"column":23,"nodeType":"422","messageId":"423","endLine":8,"endColumn":35},{"ruleId":"420","severity":1,"message":"455","line":1,"column":50,"nodeType":"422","messageId":"423","endLine":1,"endColumn":59},{"ruleId":"420","severity":1,"message":"456","line":2,"column":10,"nodeType":"422","messageId":"423","endLine":2,"endColumn":16},{"ruleId":"420","severity":1,"message":"457","line":2,"column":18,"nodeType":"422","messageId":"423","endLine":2,"endColumn":23},{"ruleId":"420","severity":1,"message":"458","line":2,"column":25,"nodeType":"422","messageId":"423","endLine":2,"endColumn":29},{"ruleId":"420","severity":1,"message":"459","line":2,"column":31,"nodeType":"422","messageId":"423","endLine":2,"endColumn":40},{"ruleId":"420","severity":1,"message":"460","line":2,"column":42,"nodeType":"422","messageId":"423","endLine":2,"endColumn":52},{"ruleId":"420","severity":1,"message":"461","line":6,"column":8,"nodeType":"422","messageId":"423","endLine":6,"endColumn":16},{"ruleId":"420","severity":1,"message":"462","line":7,"column":8,"nodeType":"422","messageId":"423","endLine":7,"endColumn":17},{"ruleId":"420","severity":1,"message":"463","line":8,"column":8,"nodeType":"422","messageId":"423","endLine":8,"endColumn":24},{"ruleId":"420","severity":1,"message":"464","line":9,"column":8,"nodeType":"422","messageId":"423","endLine":9,"endColumn":25},{"ruleId":"420","severity":1,"message":"465","line":10,"column":8,"nodeType":"422","messageId":"423","endLine":10,"endColumn":17},{"ruleId":"420","severity":1,"message":"466","line":10,"column":21,"nodeType":"422","messageId":"423","endLine":10,"endColumn":38},{"ruleId":"420","severity":1,"message":"467","line":10,"column":40,"nodeType":"422","messageId":"423","endLine":10,"endColumn":58},{"ruleId":"420","severity":1,"message":"436","line":19,"column":3,"nodeType":"422","messageId":"423","endLine":19,"endColumn":13},{"ruleId":"420","severity":1,"message":"468","line":20,"column":3,"nodeType":"422","messageId":"423","endLine":20,"endColumn":15},{"ruleId":"420","severity":1,"message":"435","line":26,"column":3,"nodeType":"422","messageId":"423","endLine":26,"endColumn":13},{"ruleId":"420","severity":1,"message":"469","line":27,"column":3,"nodeType":"422","messageId":"423","endLine":27,"endColumn":13},{"ruleId":"420","severity":1,"message":"470","line":31,"column":3,"nodeType":"422","messageId":"423","endLine":31,"endColumn":16},{"ruleId":"420","severity":1,"message":"471","line":33,"column":3,"nodeType":"422","messageId":"423","endLine":33,"endColumn":10},{"ruleId":"420","severity":1,"message":"472","line":36,"column":10,"nodeType":"422","messageId":"423","endLine":36,"endColumn":16},{"ruleId":"420","severity":1,"message":"453","line":37,"column":24,"nodeType":"422","messageId":"423","endLine":37,"endColumn":35},{"ruleId":"416","severity":1,"message":"427","line":77,"column":77,"nodeType":"418","messageId":"419","endLine":77,"endColumn":79},{"ruleId":"416","severity":1,"message":"427","line":87,"column":26,"nodeType":"418","messageId":"419","endLine":87,"endColumn":28},{"ruleId":"416","severity":1,"message":"427","line":90,"column":29,"nodeType":"418","messageId":"419","endLine":90,"endColumn":31},{"ruleId":"416","severity":1,"message":"427","line":93,"column":32,"nodeType":"418","messageId":"419","endLine":93,"endColumn":34},{"ruleId":"416","severity":1,"message":"427","line":96,"column":47,"nodeType":"418","messageId":"419","endLine":96,"endColumn":49},{"ruleId":"416","severity":1,"message":"427","line":101,"column":79,"nodeType":"418","messageId":"419","endLine":101,"endColumn":81},{"ruleId":"416","severity":1,"message":"427","line":106,"column":34,"nodeType":"418","messageId":"419","endLine":106,"endColumn":36},{"ruleId":"416","severity":1,"message":"427","line":106,"column":63,"nodeType":"418","messageId":"419","endLine":106,"endColumn":65},{"ruleId":"416","severity":1,"message":"427","line":106,"column":90,"nodeType":"418","messageId":"419","endLine":106,"endColumn":92},{"ruleId":"416","severity":1,"message":"427","line":107,"column":29,"nodeType":"418","messageId":"419","endLine":107,"endColumn":31},{"ruleId":"416","severity":1,"message":"427","line":111,"column":30,"nodeType":"418","messageId":"419","endLine":111,"endColumn":32},{"ruleId":"420","severity":1,"message":"473","line":130,"column":9,"nodeType":"422","messageId":"423","endLine":130,"endColumn":16},{"ruleId":"474","severity":1,"message":"475","line":182,"column":3,"nodeType":"476","endLine":182,"endColumn":20,"suggestions":"477"},{"ruleId":"420","severity":1,"message":"478","line":191,"column":17,"nodeType":"422","messageId":"423","endLine":191,"endColumn":24},{"ruleId":"420","severity":1,"message":"451","line":196,"column":24,"nodeType":"422","messageId":"423","endLine":196,"endColumn":29},{"ruleId":"420","severity":1,"message":"479","line":196,"column":31,"nodeType":"422","messageId":"423","endLine":196,"endColumn":37},{"ruleId":"416","severity":1,"message":"427","line":205,"column":8,"nodeType":"418","messageId":"419","endLine":205,"endColumn":10},{"ruleId":"420","severity":1,"message":"421","line":218,"column":9,"nodeType":"422","messageId":"423","endLine":218,"endColumn":17},{"ruleId":"416","severity":1,"message":"427","line":417,"column":25,"nodeType":"418","messageId":"419","endLine":417,"endColumn":27},{"ruleId":"416","severity":1,"message":"427","line":417,"column":66,"nodeType":"418","messageId":"419","endLine":417,"endColumn":68},{"ruleId":"420","severity":1,"message":"480","line":9,"column":7,"nodeType":"422","messageId":"423","endLine":9,"endColumn":18},{"ruleId":"420","severity":1,"message":"481","line":10,"column":9,"nodeType":"422","messageId":"423","endLine":10,"endColumn":14},{"ruleId":"416","severity":1,"message":"427","line":12,"column":28,"nodeType":"418","messageId":"419","endLine":12,"endColumn":30},{"ruleId":"420","severity":1,"message":"482","line":30,"column":14,"nodeType":"422","messageId":"423","endLine":30,"endColumn":21},{"ruleId":"420","severity":1,"message":"483","line":30,"column":23,"nodeType":"422","messageId":"423","endLine":30,"endColumn":33},{"ruleId":"416","severity":1,"message":"427","line":56,"column":20,"nodeType":"418","messageId":"419","endLine":56,"endColumn":22},{"ruleId":"420","severity":1,"message":"448","line":82,"column":19,"nodeType":"422","messageId":"423","endLine":82,"endColumn":24},{"ruleId":"420","severity":1,"message":"421","line":89,"column":11,"nodeType":"422","messageId":"423","endLine":89,"endColumn":19},{"ruleId":"416","severity":1,"message":"427","line":172,"column":27,"nodeType":"418","messageId":"419","endLine":172,"endColumn":29},{"ruleId":"416","severity":1,"message":"427","line":172,"column":68,"nodeType":"418","messageId":"419","endLine":172,"endColumn":70},{"ruleId":"420","severity":1,"message":"438","line":17,"column":9,"nodeType":"422","messageId":"423","endLine":17,"endColumn":16},{"ruleId":"420","severity":1,"message":"470","line":10,"column":3,"nodeType":"422","messageId":"423","endLine":10,"endColumn":16},{"ruleId":"420","severity":1,"message":"471","line":12,"column":3,"nodeType":"422","messageId":"423","endLine":12,"endColumn":10},{"ruleId":"420","severity":1,"message":"482","line":34,"column":12,"nodeType":"422","messageId":"423","endLine":34,"endColumn":19},{"ruleId":"420","severity":1,"message":"483","line":34,"column":21,"nodeType":"422","messageId":"423","endLine":34,"endColumn":31},{"ruleId":"416","severity":1,"message":"427","line":61,"column":19,"nodeType":"418","messageId":"419","endLine":61,"endColumn":21},{"ruleId":"416","severity":1,"message":"427","line":64,"column":33,"nodeType":"418","messageId":"419","endLine":64,"endColumn":35},{"ruleId":"416","severity":1,"message":"427","line":67,"column":30,"nodeType":"418","messageId":"419","endLine":67,"endColumn":32},{"ruleId":"416","severity":1,"message":"427","line":70,"column":28,"nodeType":"418","messageId":"419","endLine":70,"endColumn":30},{"ruleId":"420","severity":1,"message":"448","line":101,"column":23,"nodeType":"422","messageId":"423","endLine":101,"endColumn":28},{"ruleId":"420","severity":1,"message":"421","line":108,"column":15,"nodeType":"422","messageId":"423","endLine":108,"endColumn":23},{"ruleId":"416","severity":1,"message":"427","line":217,"column":27,"nodeType":"418","messageId":"419","endLine":217,"endColumn":29},{"ruleId":"416","severity":1,"message":"427","line":217,"column":65,"nodeType":"418","messageId":"419","endLine":217,"endColumn":67},{"ruleId":"420","severity":1,"message":"484","line":1,"column":10,"nodeType":"422","messageId":"423","endLine":1,"endColumn":16},{"ruleId":"428","severity":1,"message":"442","line":41,"column":17,"nodeType":"426","endLine":44,"endColumn":69},{"ruleId":"420","severity":1,"message":"485","line":2,"column":29,"nodeType":"422","messageId":"423","endLine":2,"endColumn":37},{"ruleId":"416","severity":1,"message":"427","line":77,"column":26,"nodeType":"418","messageId":"419","endLine":77,"endColumn":28},{"ruleId":"416","severity":1,"message":"427","line":77,"column":53,"nodeType":"418","messageId":"419","endLine":77,"endColumn":55},{"ruleId":"416","severity":1,"message":"427","line":77,"column":68,"nodeType":"418","messageId":"419","endLine":77,"endColumn":70},{"ruleId":"416","severity":1,"message":"427","line":80,"column":29,"nodeType":"418","messageId":"419","endLine":80,"endColumn":31},{"ruleId":"416","severity":1,"message":"427","line":83,"column":38,"nodeType":"418","messageId":"419","endLine":83,"endColumn":40},{"ruleId":"416","severity":1,"message":"427","line":86,"column":38,"nodeType":"418","messageId":"419","endLine":86,"endColumn":40},{"ruleId":"474","severity":1,"message":"475","line":129,"column":5,"nodeType":"476","endLine":129,"endColumn":12,"suggestions":"486"},{"ruleId":"416","severity":1,"message":"427","line":158,"column":14,"nodeType":"418","messageId":"419","endLine":158,"endColumn":16},{"ruleId":"416","severity":1,"message":"427","line":160,"column":21,"nodeType":"418","messageId":"419","endLine":160,"endColumn":23},{"ruleId":"416","severity":1,"message":"417","line":160,"column":40,"nodeType":"418","messageId":"419","endLine":160,"endColumn":42},{"ruleId":"416","severity":1,"message":"427","line":163,"column":21,"nodeType":"418","messageId":"419","endLine":163,"endColumn":23},{"ruleId":"416","severity":1,"message":"417","line":163,"column":40,"nodeType":"418","messageId":"419","endLine":163,"endColumn":42},{"ruleId":"420","severity":1,"message":"421","line":210,"column":11,"nodeType":"422","messageId":"423","endLine":210,"endColumn":19},{"ruleId":"416","severity":1,"message":"427","line":311,"column":43,"nodeType":"418","messageId":"419","endLine":311,"endColumn":45},{"ruleId":"420","severity":1,"message":"487","line":2,"column":110,"nodeType":"422","messageId":"423","endLine":2,"endColumn":125},{"ruleId":"420","severity":1,"message":"488","line":2,"column":127,"nodeType":"422","messageId":"423","endLine":2,"endColumn":132},{"ruleId":"420","severity":1,"message":"489","line":2,"column":134,"nodeType":"422","messageId":"423","endLine":2,"endColumn":138},{"ruleId":"420","severity":1,"message":"490","line":2,"column":140,"nodeType":"422","messageId":"423","endLine":2,"endColumn":151},{"ruleId":"420","severity":1,"message":"435","line":2,"column":153,"nodeType":"422","messageId":"423","endLine":2,"endColumn":163},{"ruleId":"474","severity":1,"message":"491","line":54,"column":13,"nodeType":"492","endLine":69,"endColumn":4},{"ruleId":"416","severity":1,"message":"427","line":61,"column":25,"nodeType":"418","messageId":"419","endLine":61,"endColumn":27},{"ruleId":"420","severity":1,"message":"493","line":71,"column":7,"nodeType":"422","messageId":"423","endLine":71,"endColumn":21},{"ruleId":"420","severity":1,"message":"447","line":83,"column":18,"nodeType":"422","messageId":"423","endLine":83,"endColumn":27},{"ruleId":"416","severity":1,"message":"427","line":108,"column":39,"nodeType":"418","messageId":"419","endLine":108,"endColumn":41},{"ruleId":"416","severity":1,"message":"427","line":108,"column":75,"nodeType":"418","messageId":"419","endLine":108,"endColumn":77},{"ruleId":"416","severity":1,"message":"427","line":108,"column":104,"nodeType":"418","messageId":"419","endLine":108,"endColumn":106},{"ruleId":"416","severity":1,"message":"427","line":109,"column":28,"nodeType":"418","messageId":"419","endLine":109,"endColumn":30},{"ruleId":"416","severity":1,"message":"427","line":109,"column":59,"nodeType":"418","messageId":"419","endLine":109,"endColumn":61},{"ruleId":"416","severity":1,"message":"417","line":136,"column":37,"nodeType":"418","messageId":"419","endLine":136,"endColumn":39},{"ruleId":"420","severity":1,"message":"421","line":145,"column":11,"nodeType":"422","messageId":"423","endLine":145,"endColumn":19},{"ruleId":"420","severity":1,"message":"421","line":174,"column":13,"nodeType":"422","messageId":"423","endLine":174,"endColumn":21},{"ruleId":"420","severity":1,"message":"421","line":196,"column":11,"nodeType":"422","messageId":"423","endLine":196,"endColumn":19},{"ruleId":"416","severity":1,"message":"427","line":212,"column":29,"nodeType":"418","messageId":"419","endLine":212,"endColumn":31},{"ruleId":"416","severity":1,"message":"427","line":228,"column":26,"nodeType":"418","messageId":"419","endLine":228,"endColumn":28},{"ruleId":"416","severity":1,"message":"427","line":244,"column":34,"nodeType":"418","messageId":"419","endLine":244,"endColumn":36},{"ruleId":"416","severity":1,"message":"427","line":262,"column":87,"nodeType":"418","messageId":"419","endLine":262,"endColumn":89},{"ruleId":"420","severity":1,"message":"494","line":9,"column":3,"nodeType":"422","messageId":"423","endLine":9,"endColumn":9},{"ruleId":"420","severity":1,"message":"470","line":16,"column":3,"nodeType":"422","messageId":"423","endLine":16,"endColumn":16},{"ruleId":"420","severity":1,"message":"471","line":18,"column":3,"nodeType":"422","messageId":"423","endLine":18,"endColumn":10},{"ruleId":"420","severity":1,"message":"454","line":25,"column":28,"nodeType":"422","messageId":"423","endLine":25,"endColumn":40},{"ruleId":"420","severity":1,"message":"495","line":25,"column":83,"nodeType":"422","messageId":"423","endLine":25,"endColumn":94},{"ruleId":"420","severity":1,"message":"482","line":42,"column":10,"nodeType":"422","messageId":"423","endLine":42,"endColumn":17},{"ruleId":"420","severity":1,"message":"483","line":42,"column":19,"nodeType":"422","messageId":"423","endLine":42,"endColumn":29},{"ruleId":"420","severity":1,"message":"496","line":46,"column":9,"nodeType":"422","messageId":"423","endLine":46,"endColumn":15},{"ruleId":"416","severity":1,"message":"427","line":94,"column":28,"nodeType":"418","messageId":"419","endLine":94,"endColumn":30},{"ruleId":"416","severity":1,"message":"427","line":97,"column":35,"nodeType":"418","messageId":"419","endLine":97,"endColumn":37},{"ruleId":"416","severity":1,"message":"427","line":100,"column":32,"nodeType":"418","messageId":"419","endLine":100,"endColumn":34},{"ruleId":"416","severity":1,"message":"427","line":103,"column":32,"nodeType":"418","messageId":"419","endLine":103,"endColumn":34},{"ruleId":"416","severity":1,"message":"427","line":106,"column":43,"nodeType":"418","messageId":"419","endLine":106,"endColumn":45},{"ruleId":"416","severity":1,"message":"427","line":109,"column":39,"nodeType":"418","messageId":"419","endLine":109,"endColumn":41},{"ruleId":"416","severity":1,"message":"427","line":112,"column":39,"nodeType":"418","messageId":"419","endLine":112,"endColumn":41},{"ruleId":"416","severity":1,"message":"427","line":115,"column":39,"nodeType":"418","messageId":"419","endLine":115,"endColumn":41},{"ruleId":"416","severity":1,"message":"427","line":118,"column":39,"nodeType":"418","messageId":"419","endLine":118,"endColumn":41},{"ruleId":"416","severity":1,"message":"427","line":121,"column":36,"nodeType":"418","messageId":"419","endLine":121,"endColumn":38},{"ruleId":"416","severity":1,"message":"427","line":124,"column":35,"nodeType":"418","messageId":"419","endLine":124,"endColumn":37},{"ruleId":"416","severity":1,"message":"427","line":127,"column":34,"nodeType":"418","messageId":"419","endLine":127,"endColumn":36},{"ruleId":"416","severity":1,"message":"427","line":130,"column":45,"nodeType":"418","messageId":"419","endLine":130,"endColumn":47},{"ruleId":"416","severity":1,"message":"427","line":133,"column":36,"nodeType":"418","messageId":"419","endLine":133,"endColumn":38},{"ruleId":"416","severity":1,"message":"427","line":136,"column":39,"nodeType":"418","messageId":"419","endLine":136,"endColumn":41},{"ruleId":"420","severity":1,"message":"448","line":187,"column":19,"nodeType":"422","messageId":"423","endLine":187,"endColumn":24},{"ruleId":"416","severity":1,"message":"427","line":196,"column":14,"nodeType":"418","messageId":"419","endLine":196,"endColumn":16},{"ruleId":"416","severity":1,"message":"427","line":200,"column":21,"nodeType":"418","messageId":"419","endLine":200,"endColumn":23},{"ruleId":"416","severity":1,"message":"427","line":204,"column":21,"nodeType":"418","messageId":"419","endLine":204,"endColumn":23},{"ruleId":"416","severity":1,"message":"427","line":208,"column":21,"nodeType":"418","messageId":"419","endLine":208,"endColumn":23},{"ruleId":"416","severity":1,"message":"427","line":212,"column":21,"nodeType":"418","messageId":"419","endLine":212,"endColumn":23},{"ruleId":"416","severity":1,"message":"427","line":216,"column":21,"nodeType":"418","messageId":"419","endLine":216,"endColumn":23},{"ruleId":"416","severity":1,"message":"427","line":220,"column":21,"nodeType":"418","messageId":"419","endLine":220,"endColumn":23},{"ruleId":"416","severity":1,"message":"427","line":224,"column":21,"nodeType":"418","messageId":"419","endLine":224,"endColumn":23},{"ruleId":"416","severity":1,"message":"427","line":228,"column":21,"nodeType":"418","messageId":"419","endLine":228,"endColumn":23},{"ruleId":"416","severity":1,"message":"427","line":232,"column":21,"nodeType":"418","messageId":"419","endLine":232,"endColumn":23},{"ruleId":"416","severity":1,"message":"427","line":236,"column":21,"nodeType":"418","messageId":"419","endLine":236,"endColumn":23},{"ruleId":"416","severity":1,"message":"427","line":240,"column":21,"nodeType":"418","messageId":"419","endLine":240,"endColumn":23},{"ruleId":"420","severity":1,"message":"478","line":249,"column":19,"nodeType":"422","messageId":"423","endLine":249,"endColumn":26},{"ruleId":"420","severity":1,"message":"478","line":264,"column":19,"nodeType":"422","messageId":"423","endLine":264,"endColumn":26},{"ruleId":"416","severity":1,"message":"417","line":269,"column":19,"nodeType":"418","messageId":"419","endLine":269,"endColumn":21},{"ruleId":"420","severity":1,"message":"421","line":275,"column":11,"nodeType":"422","messageId":"423","endLine":275,"endColumn":19},{"ruleId":"416","severity":1,"message":"427","line":368,"column":40,"nodeType":"418","messageId":"419","endLine":368,"endColumn":42},{"ruleId":"416","severity":1,"message":"427","line":370,"column":44,"nodeType":"418","messageId":"419","endLine":370,"endColumn":46},{"ruleId":"416","severity":1,"message":"427","line":376,"column":57,"nodeType":"418","messageId":"419","endLine":376,"endColumn":59},{"ruleId":"416","severity":1,"message":"427","line":635,"column":30,"nodeType":"418","messageId":"419","endLine":635,"endColumn":32},{"ruleId":"420","severity":1,"message":"431","line":1,"column":16,"nodeType":"422","messageId":"423","endLine":1,"endColumn":21},{"ruleId":"416","severity":1,"message":"427","line":31,"column":35,"nodeType":"418","messageId":"419","endLine":31,"endColumn":37},{"ruleId":"474","severity":1,"message":"497","line":58,"column":12,"nodeType":"476","endLine":58,"endColumn":29,"suggestions":"498"},{"ruleId":"420","severity":1,"message":"448","line":72,"column":23,"nodeType":"422","messageId":"423","endLine":72,"endColumn":28},{"ruleId":"416","severity":1,"message":"427","line":74,"column":59,"nodeType":"418","messageId":"419","endLine":74,"endColumn":61},{"ruleId":"416","severity":1,"message":"427","line":89,"column":28,"nodeType":"418","messageId":"419","endLine":89,"endColumn":30},{"ruleId":"416","severity":1,"message":"427","line":91,"column":37,"nodeType":"418","messageId":"419","endLine":91,"endColumn":39},{"ruleId":"416","severity":1,"message":"427","line":113,"column":59,"nodeType":"418","messageId":"419","endLine":113,"endColumn":61},{"ruleId":"420","severity":1,"message":"421","line":127,"column":15,"nodeType":"422","messageId":"423","endLine":127,"endColumn":23},{"ruleId":"420","severity":1,"message":"499","line":3,"column":10,"nodeType":"422","messageId":"423","endLine":3,"endColumn":18},{"ruleId":"420","severity":1,"message":"484","line":5,"column":10,"nodeType":"422","messageId":"423","endLine":5,"endColumn":16},{"ruleId":"420","severity":1,"message":"500","line":7,"column":10,"nodeType":"422","messageId":"423","endLine":7,"endColumn":13},{"ruleId":"420","severity":1,"message":"481","line":11,"column":11,"nodeType":"422","messageId":"423","endLine":11,"endColumn":16},{"ruleId":"420","severity":1,"message":"501","line":11,"column":18,"nodeType":"422","messageId":"423","endLine":11,"endColumn":28},{"ruleId":"420","severity":1,"message":"438","line":15,"column":9,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"420","severity":1,"message":"502","line":17,"column":12,"nodeType":"422","messageId":"423","endLine":17,"endColumn":23},{"ruleId":"420","severity":1,"message":"503","line":21,"column":12,"nodeType":"422","messageId":"423","endLine":21,"endColumn":25},{"ruleId":"420","severity":1,"message":"504","line":1,"column":31,"nodeType":"422","messageId":"423","endLine":1,"endColumn":41},{"ruleId":"420","severity":1,"message":"505","line":11,"column":11,"nodeType":"422","messageId":"423","endLine":11,"endColumn":18},{"ruleId":"420","severity":1,"message":"506","line":13,"column":14,"nodeType":"422","messageId":"423","endLine":13,"endColumn":26},{"ruleId":"474","severity":1,"message":"491","line":20,"column":15,"nodeType":"507","endLine":35,"endColumn":6},{"ruleId":"474","severity":1,"message":"508","line":35,"column":7,"nodeType":"476","endLine":35,"endColumn":19,"suggestions":"509"},{"ruleId":"420","severity":1,"message":"510","line":1,"column":8,"nodeType":"422","messageId":"423","endLine":1,"endColumn":13},{"ruleId":"420","severity":1,"message":"510","line":1,"column":8,"nodeType":"422","messageId":"423","endLine":1,"endColumn":13},{"ruleId":"420","severity":1,"message":"511","line":2,"column":13,"nodeType":"422","messageId":"423","endLine":2,"endColumn":20},{"ruleId":"420","severity":1,"message":"512","line":3,"column":13,"nodeType":"422","messageId":"423","endLine":3,"endColumn":20},{"ruleId":"420","severity":1,"message":"513","line":4,"column":13,"nodeType":"422","messageId":"423","endLine":4,"endColumn":20},{"ruleId":"420","severity":1,"message":"485","line":1,"column":17,"nodeType":"422","messageId":"423","endLine":1,"endColumn":25},{"ruleId":"420","severity":1,"message":"514","line":2,"column":10,"nodeType":"422","messageId":"423","endLine":2,"endColumn":14},{"ruleId":"420","severity":1,"message":"481","line":6,"column":13,"nodeType":"422","messageId":"423","endLine":6,"endColumn":18},{"ruleId":"420","severity":1,"message":"515","line":6,"column":20,"nodeType":"422","messageId":"423","endLine":6,"endColumn":28},{"ruleId":"420","severity":1,"message":"516","line":7,"column":25,"nodeType":"422","messageId":"423","endLine":7,"endColumn":38},"no-native-reassign",["517"],"no-negated-in-lhs",["518"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '===' and instead saw '=='.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Box' is defined but never used.","'Paper' is defined but never used.","'TextField' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Typography' is defined but never used.","'InputLabel' is defined but never used.","'useEffect' is defined but never used.","'classes' is assigned a value but never used.","'name' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Grid' is defined but never used.","'MenuItem' is defined but never used.","'format' is defined but never used.","'values' is assigned a value but never used.","'setValues' is assigned a value but never used.","'value' is assigned a value but never used.","'data' is assigned a value but never used.","'CircularProgress' is defined but never used.","'index' is assigned a value but never used.","'newValues' is assigned a value but never used.","'onlyLetters' is defined but never used.","'currencyMask' is defined but never used.","'Component' is defined but never used.","'Formik' is defined but never used.","'Field' is defined but never used.","'Form' is defined but never used.","'useFormik' is defined but never used.","'FieldArray' is defined but never used.","'Checkbox' is defined but never used.","'FormGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'ScopedCssBaseline' is defined but never used.","'lifecycle' is defined but never used.","'componentDidMount' is defined but never used.","'componentDidUpdate' is defined but never used.","'ListItemText' is defined but never used.","'withStyles' is defined but never used.","'DialogActions' is defined but never used.","'Tooltip' is defined but never used.","'purple' is defined but never used.","'methods' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'values'. Either include it or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.","ArrayExpression",["519"],"'checked' is assigned a value but never used.","'select' is assigned a value but never used.","'showSidebar' is assigned a value but never used.","'token' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'Button' is defined but never used.","'useState' is defined but never used.",["520"],"'TablePagination' is defined but never used.","'Table' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'CurrencyFormat' is assigned a value but never used.","'Select' is defined but never used.","'onlyNumbers' is defined but never used.","'person' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userLogged.empresaId'. Either include it or remove the dependency array.",["521"],"'useFetch' is defined but never used.","'url' is defined but never used.","'userLogged' is assigned a value but never used.","'novaMateria' is defined but never used.","'editarMateria' is defined but never used.","'useContext' is defined but never used.","'history' is assigned a value but never used.","'handleErrors' is defined but never used.","FunctionExpression","React Hook useEffect has missing dependencies: 'body' and 'token'. Either include them or remove the dependency array.",["522"],"'React' is defined but never used.","'FaIcons' is defined but never used.","'AiIcons' is defined but never used.","'IoIcons' is defined but never used.","'Link' is defined but never used.","'setToken' is assigned a value but never used.","'setUserLogged' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},"Update the dependencies array to be: [values, values.QtdAulas]",{"range":"531","text":"532"},"Update the dependencies array to be: [todos, values]",{"range":"533","text":"534"},"Update the dependencies array to be: [retornoContrato, userLogged.empresaId]",{"range":"535","text":"536"},"Update the dependencies array to be: [url, method, token, body]",{"range":"537","text":"538"},[5838,5855],"[values, values.QtdAulas]",[3866,3873],"[todos, values]",[2076,2093],"[retornoContrato, userLogged.empresaId]",[894,906],"[url, method, token, body]"]